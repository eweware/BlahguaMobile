// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Linq.Expressions;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace BlahguaMobile.IOS
{
	public enum BGLeftMenuType
	{
		Channels,
		BlahType
	}

	public partial class BGLeftMenuTableViewController : UITableViewController
	{
		public BGLeftMenuType Type 
		{
			get;
			set;
		}

		public BGLeftMenuTableViewController (IntPtr handle) : base (handle)
		{
			Type = BGLeftMenuType.Channels;
		}

		public BGLeftMenuTableViewController() : base()
		{
			Type = BGLeftMenuType.Channels;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromFile ("darkGrayBack.png"));
		}

		public override void ViewWillAppear (bool animated)
		{
			TableView.Source = new BGLeftMenuTableSource(Type);
			TableView.ReloadData ();
			base.ViewWillAppear (animated);
		}
	}

	public class BGLeftMenuTableSource : UITableViewSource
	{
		private BGLeftMenuType type;
		private List<NSIndexPath> selectedRows = new List<NSIndexPath>();

		public BGLeftMenuTableSource(BGLeftMenuType type)
		{
			this.type = type;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			BGMenuTableCellView cell = (BGMenuTableCellView)tableView.DequeueReusableCell ("SimpleRow");
		
			if(tableView.NumberOfSections() == 2)
			{
				if(indexPath.Section == 0)
				{
					var channel = BlahguaCore.BlahguaAPIObject.Current.CurrentChannelList.ElementAt (indexPath.Row);
					cell.Text = channel.ChannelName;
				}
				else
				{
					var type = BlahguaCore.BlahguaAPIObject.Current.CurrentChannelTypeList.ElementAt (indexPath.Row);
					cell.Text = type.N;
				}
			}
			else
			{
				var type = BlahguaCore.BlahguaAPIObject.Current.CurrentBlahTypes.ElementAt(indexPath.Row);
				cell.Text = type.N;
			}
			return cell;
		}

		public override int RowsInSection (UITableView tableView, int section)
		{
			if(tableView.NumberOfSections() == 2)
			{
				if(section == 0)
				{
					return BlahguaCore.BlahguaAPIObject.Current.CurrentChannelList.Count;
				} else
				{
					return BlahguaCore.BlahguaAPIObject.Current.CurrentChannelTypeList.Count;
				}
			}
			else
			{
				return BlahguaCore.BlahguaAPIObject.Current.CurrentBlahTypes.Count;
			}
		}

		public override int NumberOfSections (UITableView tableView)
		{
			if(type != BGLeftMenuType.BlahType)
			{
				return 2;
			}
			else
			{
				return 1;
			}
		}

		public override UIView GetViewForHeader (UITableView tableView, int section)
		{
			BGMenuTableHeaderView headerCell = (BGMenuTableHeaderView)tableView.DequeueReusableCell ("HeaderCell");
			if (tableView.NumberOfSections() == 2)
			{
				if (section == 0)
				{
					headerCell.Header = "Channels";
				} else if (section == 1)
				{
					headerCell.Header = "View";
				} 
			}
			else
			{
				headerCell.Header = "Type of post";
			}
			return headerCell;
		}

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{

		}
	}
}