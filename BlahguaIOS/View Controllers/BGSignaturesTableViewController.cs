// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections.Generic;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace BlahguaMobile.IOS
{
	public partial class BGSignaturesTableViewController : UITableViewController
	{
		public new UIViewController ParentViewController 
		{
			get;
			set;
		}

		public BGSignaturesTableViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			TableView.TableFooterView = new UIView ();
			TableView.Source = new BGSignaturesTableSource (this);
		}

		partial void Done (MonoTouch.UIKit.UIBarButtonItem sender)
		{
			DismissViewController(true, null);
		}

        partial void SelectAll(MonoTouch.UIKit.UIBarButtonItem sender)
		{
			int count = TableView.NumberOfRowsInSection(0);
			for(int i = 0; i < count; i++)
			{
				var ip = NSIndexPath.FromRowSection(i, 0);
				TableView.SelectRow(ip, true, UITableViewScrollPosition.None);
				TableView.Source.RowSelected(TableView, ip);
			}
		}

		public class BGSignaturesTableSource : UITableViewSource
		{
			private BGSignaturesTableViewController vc;

			public BGSignaturesTableSource(BGSignaturesTableViewController vc) : base()
			{
				this.vc = vc;
			}

			#region implemented abstract members of UITableViewSource

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (BGSignaturesCell)tableView.DequeueReusableCell ("cell");
				if(indexPath.Row == 0)
				{
					cell.SetUp ("User Profile");
				}
				else
				{
					if (BlahguaAPIObject.Current.CurrentUser.Badges != null && BlahguaAPIObject.Current.CurrentUser.Badges.Any ())
						cell.SetUp (BlahguaAPIObject.Current.CurrentUser.Badges [indexPath.Row - 1].BadgeName);
				}

				if(vc.ParentViewController is BGNewPostViewController)
				{
					if(indexPath.Row == 0)
					{
						if (BlahguaAPIObject.Current.CreateRecord.UseProfile)
							cell.Accessory = UITableViewCellAccessory.Checkmark;
						else
							cell.Accessory = UITableViewCellAccessory.None;
					}
					else
					{
						if (BlahguaAPIObject.Current.CreateRecord.B != null)
						{
							if(BlahguaAPIObject.Current.CreateRecord.B.Contains(BlahguaAPIObject.Current.CurrentUser.B[indexPath.Row - 1]))
								cell.Accessory = UITableViewCellAccessory.Checkmark;
						}
						else
							cell.Accessory = UITableViewCellAccessory.None;
					}
				}
				else if(vc.ParentViewController is BGNewCommentViewController)
				{
					if(indexPath.Row == 0)
					{
						if (BlahguaAPIObject.Current.CreateCommentRecord.UseProfile)
							cell.Accessory = UITableViewCellAccessory.Checkmark;
						else
							cell.Accessory = UITableViewCellAccessory.None;
					}
					else
					{
						if (BlahguaAPIObject.Current.CreateCommentRecord.BD != null) {
							if (BlahguaAPIObject.Current.CreateCommentRecord.BD.Contains (BlahguaAPIObject.Current.CurrentUser.B [indexPath.Row - 1]))
								cell.Accessory = UITableViewCellAccessory.Checkmark;
						}
						else
							cell.Accessory = UITableViewCellAccessory.None;
					}
				}

				return cell;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				int count = 1;
				if(BlahguaAPIObject.Current.CurrentUser.Badges != null && BlahguaAPIObject.Current.CurrentUser.Badges.Any())
				{
					count += BlahguaAPIObject.Current.CurrentUser.Badges.Count;
				}
				return count;
			}

			public override int NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				if(indexPath.Row == 0)
				{
					return 36f;
				}
				else
				{
					return 28f;
				}
			}

			public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
			{
				if(vc.ParentViewController is BGNewPostViewController)
				{
					if(indexPath.Row == 0)
					{
						BlahguaAPIObject.Current.CreateRecord.UseProfile = true;
					}
					else
					{
						if (BlahguaAPIObject.Current.CreateRecord.B == null)
							BlahguaAPIObject.Current.CreateRecord.B = new List<string> ();
						BlahguaAPIObject.Current.CreateRecord.B.Add (BlahguaAPIObject.Current.CurrentUser.B [indexPath.Row - 1]);
					}
				}
				else if(vc.ParentViewController is BGNewCommentViewController)
				{
					if(indexPath.Row == 0)
					{
						BlahguaAPIObject.Current.CreateCommentRecord.UseProfile = true;
					}
					else
					{
						if (BlahguaAPIObject.Current.CreateCommentRecord.BD == null)
							BlahguaAPIObject.Current.CreateCommentRecord.BD = new List<string> ();
						BlahguaAPIObject.Current.CreateCommentRecord.BD.Add (BlahguaAPIObject.Current.CurrentUser.B [indexPath.Row - 1]);
					}
				}
				tableView.CellAt (indexPath).Accessory = UITableViewCellAccessory.Checkmark;
			}

			public override void RowDeselected (UITableView tableView, NSIndexPath indexPath)
			{
				if(vc.ParentViewController is BGNewPostViewController)
				{
					if(indexPath.Row == 0)
					{
						BlahguaAPIObject.Current.CreateRecord.UseProfile = false;
					}
					else
					{
						BlahguaAPIObject.Current.CreateRecord.B.Remove (BlahguaAPIObject.Current.CurrentUser.B [indexPath.Row - 1]);
					}
				}
				else if(vc.ParentViewController is BGNewCommentViewController)
				{
					if(indexPath.Row == 0)
					{
						BlahguaAPIObject.Current.CreateCommentRecord.UseProfile = false;
					}
					else
					{
						BlahguaAPIObject.Current.CreateCommentRecord.BD.Remove (BlahguaAPIObject.Current.CurrentUser.B [indexPath.Row - 1]);
					}
				}
				tableView.CellAt (indexPath).Accessory = UITableViewCellAccessory.None;
			}

			#endregion


		}
	}
}
