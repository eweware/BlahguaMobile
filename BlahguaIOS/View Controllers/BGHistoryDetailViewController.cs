// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog.Utilities;

namespace BlahguaMobile.IOS
{
	public partial class BGHistoryDetailViewController : UITableViewController
	{
	
		public BGHistoryViewController ParentViewController
		{
			get;
			set;
		}

		public BGHistoryDetailViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
            View.BackgroundColor = UIColor.FromPatternImage(UIImage.FromBundle("grayBack"));
			Title = "History Detail";

			TableView.BackgroundColor = UIColor.White;
			//TableView.BackgroundColor = UIColor.FromPatternImage(UIImage.FromBundle("grayBack"));
			TableView.Source = new BGHistoryDetailTableSource(this);
			TableView.TableFooterView = new UIView ();
			TableView.AllowsSelection = false;
			TableView.RowHeight = 100;
			TableView.TableHeaderView = new UIView ();
			TableView.SeparatorInset = new UIEdgeInsets (0, 0, 0, 0);
			TableView.ReloadData ();

			//this.TableView.Source = new Source (this);

		}
	}

	public class BGHistoryDetailTableSource : UITableViewSource
	{
		private BGHistoryDetailViewController vc;
		private float yCoordStart; 
		private float labelXCoordStart;
		private const float baseXStart = 30f;
		private const float space = 8f;
		private SizeF baseSizeForFitting = new SizeF (240, 21);

		public BGHistoryDetailTableSource(BGHistoryDetailViewController vc) : base()
		{
			this.vc = vc;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell ("C") as SWTableViewCell;

			if (cell == null) {
			
				var leftView = new UIButton ();
				//leftView.Frame = new RectangleF (0, 0, SWTableViewCell.UtilityButtonsWidthMax, tableView.RowHeight);
				leftView.Frame = new RectangleF (0, 0, 120, tableView.RowHeight); 
				leftView.BackgroundColor=UIColor.Blue;
				leftView.SetTitle ("OPEN POST", UIControlState.Normal);
				leftView.TouchUpInside += (object sender, EventArgs e) => {

					Console.WriteLine("Yogi bha");

				};
					
				var buttons = new System.Collections.Generic.List<UIButton> ();
				buttons.AddUtilityButton ("Delete", UIColor.Red);
				//buttons.AddUtilityButton ("Edit", UIColor.Blue);


				cell = new SWTableViewCell (UITableViewCellStyle.Subtitle, "C", tableView, buttons, leftView);
				cell.Scrolling += OnScrolling;
				cell.UtilityButtonPressed += OnButtonPressed;
			}
				
			if (cell.ContentView.Subviews!=null) {

				foreach(UIView sub in cell.ContentView.Subviews)
				{
					sub.RemoveFromSuperview();
				}
			}

			cell.HideSwipedContent (false);//reset cell state
			cell.SetNeedsDisplay ();

			int commentCountVal;
			if (vc.ParentViewController.isBlahs) {

				//cell.SetUp (vc.ParentViewController.UserBlahs [indexPath.Row]);
				Blah userBlah = vc.ParentViewController.UserBlahs [indexPath.Row];
				commentCountVal = userBlah.C;
				string historyType = "Blahs";
				SetUp (cell,historyType, userBlah.TypeName,userBlah.T, userBlah.P.ToString (),userBlah.D.ToString (),null,userBlah.ElapsedTimeString,
					userBlah.ConversionString,commentCountVal);

			} else {

				//cell.SetUp (vc.ParentViewController.UserComments [indexPath.Row]);
				Comment userComment = vc.ParentViewController.UserComments [indexPath.Row];
				string historyType = "Comments";
				commentCountVal = -1;
				SetUp (cell,historyType,null,userComment.T, userComment.UpVoteCount.ToString (),userComment.DownVoteCount.ToString (), userComment.AuthorName,
					userComment.ElapsedTimeString,null,commentCountVal);



			}	
				
			return cell;
		}
			
		private void SetUp(UITableViewCell cell,string historyType,string type,string text, string upVotesText,string downVotesText,string userNameString,string timeString,string conversionStirng,int commentsCount)
		{

			var textView = new UITextView ();
			var upVotesLbl = new UILabel ();
			var downVotesLbl = new UILabel ();
			var userNameLbl = new UILabel ();
			var daysAgoLbl = new UILabel ();
			var conversionRatioLbl = new UILabel ();
			var commentsCountLbl = new UILabel ();
			var upVoteImageView = new UIImageView ();
			var downVoteImageView = new UIImageView ();
			var conversionImagView = new UIImageView ();
			var commentIconImageView = new UIImageView ();

			yCoordStart = space;
			labelXCoordStart = baseXStart;

			//if (historyType.Equals ("Comments") || historyType.Equals ("Blahs")) {

				textView.RemoveFromSuperview ();
				if(!String.IsNullOrEmpty(text)) {

					textView.AttributedText = new NSAttributedString (text, UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
					textView.Editable = false;
					var newSize = textView.SizeThatFits (new SizeF (320 - baseXStart * 2, 568));
					cell.ContentView.AddSubview (textView);
					textView.Frame = new RectangleF (baseXStart, yCoordStart, 320 - baseXStart * 2, newSize.Height);
					yCoordStart += textView.Frame.Height + space;
				}

				if(!String.IsNullOrEmpty(type)) {

					var commentImageView = new UIImageView ();

					if (type.Equals("says")) {
						commentImageView.Image = UIImage.FromBundle ("icon_speechact_say");
					} else if(type.Equals("predicts")){
						commentImageView.Image = UIImage.FromBundle ("icon_speechact_predict");
					} else if(type.Equals("polls")) {
						commentImageView.Image = UIImage.FromBundle ("icon_speechact_poll");
					} else if(type.Equals("asks")) {
						commentImageView.Image = UIImage.FromBundle ("icon_speechact_ask");
					} else {
						commentImageView.Image = UIImage.FromBundle ("icon_speechact_leak");
					}
					//commentImageView.Image = ImageLoader.DefaultRequestImage(new Uri(imageUrl), new ImageUpdateDelegate (commentImageView));

					cell.ContentView.AddSubview (commentImageView);
					commentImageView.Frame = new RectangleF (baseXStart, yCoordStart-15, 20f, 20f);
				   
				}

			 
			    upVoteImageView.Image = UIImage.FromBundle ("arrow-up");
			    upVoteImageView.Frame = new RectangleF (baseXStart+30, yCoordStart-15, 10f, 20f);
			    cell.ContentView.AddSubview (upVoteImageView);

			    labelXCoordStart += 40; 
				upVotesLbl.AttributedText = new NSAttributedString (upVotesText,UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black);
			    SetLabelSize (upVotesLbl,cell);

			    downVoteImageView.Image = UIImage.FromBundle ("arrow-down");
			    downVoteImageView.Frame = new RectangleF (baseXStart+60, yCoordStart-15, 10f, 20f);
			    cell.ContentView.AddSubview (downVoteImageView);

			    labelXCoordStart += 20; 
			    downVotesLbl.AttributedText = new NSAttributedString (upVotesText,UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black); 
			    SetLabelSize (downVotesLbl,cell);

				if (!String.IsNullOrEmpty (userNameString)) {

					userNameLbl.AttributedText = new NSAttributedString (userNameString, UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black);
					SetLabelSize (userNameLbl, cell);
				}
				
			    if (!String.IsNullOrEmpty (conversionStirng)) {

				    conversionImagView.Image = UIImage.FromBundle ("eye");
				    conversionImagView.Frame = new RectangleF (baseXStart+100, yCoordStart-10, 20f, 10f);
				    cell.ContentView.AddSubview (conversionImagView);
				    labelXCoordStart += 30; 	

					conversionRatioLbl.AttributedText = new NSAttributedString (conversionStirng, UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black);
					SetLabelSize (conversionRatioLbl, cell);

			    }

				
				if (commentsCount >= 0) {

					commentIconImageView.Image = UIImage.FromBundle ("commentss");
					commentIconImageView.Frame = new RectangleF (baseXStart+195, yCoordStart-10, 20f, 10f);
					cell.ContentView.AddSubview (commentIconImageView);
				    labelXCoordStart += 40; 	

					commentsCountLbl.AttributedText = new NSAttributedString (commentsCount.ToString (), UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black);
					SetLabelSize (commentsCountLbl, cell);
				}

			    yCoordStart += downVotesLbl.Frame.Height + space;
			    labelXCoordStart = baseXStart;
 			    daysAgoLbl.AttributedText = new NSAttributedString (timeString, UIFont.FromName (BGAppearanceConstants.BoldFontName, 12), UIColor.Black);
			    SetLabelSize (daysAgoLbl,cell);
			    //cell.ContentView.Frame = new RectangleF (0, 0, 320, 50);
		}

		private void SetLabelSize(UILabel label,UITableViewCell cell)
		{
			label.RemoveFromSuperview ();
			var newSize = label.SizeThatFits(baseSizeForFitting);
			label.Frame = new RectangleF (labelXCoordStart, yCoordStart-10,newSize.Width, newSize.Height);
			cell.ContentView.AddSubview (label);
			labelXCoordStart += newSize.Width + space;
		}

		void OnScrolling (object sender, ScrollingEventArgs e)
		{
			//uncomment to close any other cells that are open when another cell is swiped

				if (e.CellState != SWCellState.Center) {
				var paths = this.vc.TableView.IndexPathsForVisibleRows;
					foreach (var path in paths) {
						if(path.Equals(e.IndexPath))
						   continue;
					var cell = (SWTableViewCell)this.vc.TableView.CellAt (path);
						if (cell.State != SWCellState.Center) {
							cell.HideSwipedContent (true);
						}
					}
				}
				
		}


		void OnButtonPressed (object sender, CellUtilityButtonClickedEventArgs e)
		{
			if (e.UtilityButtonIndex ==  1) {

				new UIAlertView("Pressed", "You pressed the edit button!", null, null, new[] {"OK"}).Show();
			}
			else if(e.UtilityButtonIndex == 0) {

				Console.WriteLine (e.IndexPath);
				var blah = vc.ParentViewController.UserBlahs[e.IndexPath.Row];
				vc.ParentViewController.UserBlahs.Remove (blah);
				this.vc.TableView.ReloadData ();
			}
		}
			
		public override int RowsInSection (UITableView tableview, int section)
		{
			if(vc.ParentViewController.isBlahs)
			{
				return vc.ParentViewController.UserBlahs.Count;
			}
			else
			{
				return vc.ParentViewController.UserComments.Count;
			}
		}
			
		public override int NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		/*public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
		
			/*var cell = (BGHistoryDetailCell)tableView.DequeueReusableCell ("historyDetailCell");
			if (vc.ParentViewController.isBlahs)
				cell.SetUp (vc.ParentViewController.UserBlahs [indexPath.Row]);
			else
				cell.SetUp (vc.ParentViewController.UserComments [indexPath.Row]);
			return cell.ContentView.Frame.Height;

			//return 100.0f;

		}*/
		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			//cell.Scrolling += OnScrolling;
		}

		public override float GetHeightForHeader (UITableView tableView, int section)
		{
			return 45f;
		}

		public override UIView GetViewForHeader (UITableView tableView, int section)
		{
			UIView headerView = new UIView (new RectangleF (0, 0, 320, 40));
			headerView.BackgroundColor = UIColor.LightGray;
			UILabel label = new UILabel (new RectangleF (20, 7, 280, 21));
			string labelText = String.Empty;
			if(vc.ParentViewController.isBlahs)
			{
				labelText = "Posts" + "(" + vc.ParentViewController.UserBlahs.Count + ")";

			}
			else
			{
				labelText = "Comments" + "(" + vc.ParentViewController.UserComments.Count + ")";
			}
			label.AttributedText = new NSAttributedString(
				labelText,
				UIFont.FromName(BGAppearanceConstants.FontName, 17),
				UIColor.Black
			);
			headerView.AddSubview (label);

			UILabel titleLbl = new UILabel (new RectangleF (20, 25, 280, 21));
			titleLbl.AttributedText = new NSAttributedString(
				"What you've sent into the network",
				UIFont.FromName(BGAppearanceConstants.FontName, 10),
				UIColor.Black
			);

			headerView.AddSubview (titleLbl);
			return headerView;
		}

		public override bool CanEditRow (UITableView tableView, NSIndexPath indexPath)
		{
			if (vc.ParentViewController.isBlahs)
				return true;
			else
				return false;
		}

		public override void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
		{
			if(editingStyle == UITableViewCellEditingStyle.Delete)
			{
				if(vc.ParentViewController.isBlahs)
				{
					var blah = vc.ParentViewController.UserBlahs[indexPath.Row];
					vc.ParentViewController.UserBlahs.Remove (blah);
					tableView.DeleteRows (new NSIndexPath [] { indexPath }, UITableViewRowAnimation.Left);
					BlahguaAPIObject.Current.DeleteBlah (blah._id, BlahDeleted);
				}
			} 
			else if(editingStyle == UITableViewCellEditingStyle.None)
			{
				return;
			}

		}

		public void BlahDeleted (string status)
		{
			Console.WriteLine (status);
		}
	}
}
