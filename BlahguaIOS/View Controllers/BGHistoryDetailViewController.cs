// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace BlahguaMobile.IOS
{
	public partial class BGHistoryDetailViewController : UITableViewController
	{
		public BGHistoryViewController ParentViewController 
		{
			get;
			set;
		}

		public BGHistoryDetailViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			View.BackgroundColor = UIColor.FromPatternImage(UIImage.FromFile("grayBack.png"));

			TableView.BackgroundColor = UIColor.White;
			TableView.Source = new BGHistoryDetailTableSource(this);
			TableView.TableFooterView = new UIView ();
			TableView.ReloadData ();
		}
	}

	public class BGHistoryDetailTableSource : UITableViewSource
	{
		private BGHistoryDetailViewController vc;

		public BGHistoryDetailTableSource(BGHistoryDetailViewController vc) : base()
		{
			this.vc = vc;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = (BGHistoryDetailCell)tableView.DequeueReusableCell ("historyDetailCell");
			if (vc.ParentViewController.isBlahs)
				cell.SetUp (vc.ParentViewController.UserBlahs [indexPath.Row]);
			else
				cell.SetUp (vc.ParentViewController.UserComments [indexPath.Row]);
			return cell;
		}

		public override int RowsInSection (UITableView tableview, int section)
		{
			if(vc.ParentViewController.isBlahs)
			{
				return vc.ParentViewController.UserBlahs.Count;
			}
			else
			{
				return vc.ParentViewController.UserComments.Count;
			}
		}
			
		public override int NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = (BGHistoryDetailCell)tableView.DequeueReusableCell ("historyDetailCell");
			if (vc.ParentViewController.isBlahs)
				cell.SetUp (vc.ParentViewController.UserBlahs [indexPath.Row]);
			else
				cell.SetUp (vc.ParentViewController.UserComments [indexPath.Row]);
			return cell.ContentView.Frame.Height;
		}

		public override float GetHeightForHeader (UITableView tableView, int section)
		{
			return 33f;
		}

		public override UIView GetViewForHeader (UITableView tableView, int section)
		{
			UIView headerView = new UIView (new RectangleF (0, 0, 320, 33));
			headerView.BackgroundColor = UIColor.Clear;
			UILabel label = new UILabel (new RectangleF (20, 7, 280, 21));
			string labelText = String.Empty;
			if(vc.ParentViewController.isBlahs)
			{
				labelText = "Posts" + "(" + vc.ParentViewController.UserBlahs.Count + ")";

			}
			else
			{
				labelText = "Comments" + "(" + vc.ParentViewController.UserComments.Count + ")";
			}
			label.AttributedText = new NSAttributedString(
				labelText,
				UIFont.FromName(BGAppearanceConstants.FontName, 17),
				UIColor.Black
			);
			headerView.AddSubview (label);
			return headerView;
		}

		public override bool CanEditRow (UITableView tableView, NSIndexPath indexPath)
		{
			if (vc.ParentViewController.isBlahs)
				return true;
			else
				return false;
		}

		public override void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
		{
			if(editingStyle == UITableViewCellEditingStyle.Delete)
			{
				if(vc.ParentViewController.isBlahs)
				{
					var blah = vc.ParentViewController.UserBlahs[indexPath.Row];
					vc.ParentViewController.UserBlahs.Remove (blah);
					tableView.DeleteRows (new NSIndexPath [] { indexPath }, UITableViewRowAnimation.Left);
					BlahguaAPIObject.Current.DeleteBlah (blah._id, BlahDeleted);
				}
			} 
			else if(editingStyle == UITableViewCellEditingStyle.None)
			{
				return;
			}

		}

		public void BlahDeleted (string status)
		{
			Console.WriteLine (status);
		}
	}
}
