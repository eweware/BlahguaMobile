// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog.Utilities;

namespace BlahguaMobile.IOS
{
	public partial class BGHistoryDetailViewController : UITableViewController
	{
	
		public BGHistoryViewController ParentViewController
		{
			get;
			set;
		}

		public BGHistoryDetailViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
            View.BackgroundColor = UIColor.FromPatternImage(UIImage.FromBundle("grayBack"));
			Title = "History Detail";

			TableView.BackgroundColor = UIColor.White;
			//TableView.BackgroundColor = UIColor.FromPatternImage(UIImage.FromBundle("grayBack"));
			TableView.Source = new BGHistoryDetailTableSource(this);
			TableView.TableFooterView = new UIView ();
			TableView.AllowsSelection = false;
			TableView.RowHeight = 70;
			TableView.SeparatorInset = new UIEdgeInsets (0, 0, 0, 0);

			TableView.ReloadData ();

			//this.TableView.Source = new Source (this);

		}
	}

	public class BGHistoryDetailTableSource : UITableViewSource
	{
		private BGHistoryDetailViewController vc;
		private float yCoordStart; 
		private float labelXCoordStart;
		private const float baseXStart = 30f;
		private const float space = 8f;
		private SizeF baseSizeForFitting = new SizeF (240, 21);

		public BGHistoryDetailTableSource(BGHistoryDetailViewController vc) : base()
		{
			this.vc = vc;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell ("C") as SWTableViewCell;

			if (cell == null) {
			
				var leftView = new UIButton ();
				//leftView.Frame = new RectangleF (0, 0, SWTableViewCell.UtilityButtonsWidthMax, tableView.RowHeight);
				leftView.Frame = new RectangleF (0, 0, 120, tableView.RowHeight); 
				leftView.BackgroundColor=UIColor.Blue;
				leftView.SetTitle ("OPEN POST", UIControlState.Normal);
				leftView.TouchUpInside += (object sender, EventArgs e) => {

					Console.WriteLine("Yogi bha");

				};
					
				cell = new SWTableViewCell (UITableViewCellStyle.Subtitle, "C", tableView,leftView);
				cell.Scrolling += OnScrolling;

			}
				
			cell.HideSwipedContent (false);//reset cell state
			cell.SetNeedsDisplay ();

			if (vc.ParentViewController.isBlahs) {
				//cell.SetUp (vc.ParentViewController.UserBlahs [indexPath.Row]);
				string type= vc.ParentViewController.UserBlahs [indexPath.Row].TypeName;
				//int commentCount = vc.ParentViewController.UserBlahs [indexPath.Row].Comments.Count;
				//int count = vc.ParentViewController.UserBlahs [indexPath.Row].Comments.Count == null ? 0 : vc.ParentViewController.UserBlahs [indexPath.Row].Comments.Count;
				SetUp (cell,type,vc.ParentViewController.UserBlahs [indexPath.Row].T, vc.ParentViewController.UserBlahs [indexPath.Row].P.ToString () + "/" + vc.ParentViewController.UserBlahs [indexPath.Row].D.ToString (), vc.ParentViewController.UserBlahs [indexPath.Row].ChannelName, vc.ParentViewController.UserBlahs [indexPath.Row].ElapsedTimeString);

			} else {
				//cell.SetUp (vc.ParentViewController.UserComments [indexPath.Row]);
				SetUp (cell,null,vc.ParentViewController.UserComments [indexPath.Row].T, vc.ParentViewController.UserComments [indexPath.Row].UpVoteCount.ToString () + "/" + vc.ParentViewController.UserComments [indexPath.Row].DownVoteCount.ToString (), vc.ParentViewController.UserComments [indexPath.Row].AuthorName, vc.ParentViewController.UserComments [indexPath.Row].ElapsedTimeString);
			}	

			foreach(UIView sub in cell.ContentView.Subviews)
			{
				//sub.RemoveFromSuperview();
			}
			Console.WriteLine (cell.ContentView.Subviews);

			return cell;


		}
			
		private void SetUp(UITableViewCell cell,string type,string text, string upAndDownVotesText,string userNameString,string timeString)
		{

			var textView = new UITextView();
			var upAndDownVotes = new UILabel ();
			var userNameLbl = new UILabel ();
			var daysAgoLbl = new UILabel ();


			yCoordStart = space;
			labelXCoordStart = baseXStart;

			if(!String.IsNullOrEmpty(type))
			{
				var commentImageView = new UIImageView ();

				if (type.Equals("says")) {
					commentImageView.Image = UIImage.FromBundle ("icon_speechact_say_teal");
				} else if(type.Equals("predicts")){
					commentImageView.Image = UIImage.FromBundle ("icon_speechact_predict_teal");
				} else if(type.Equals("polls")) {
					commentImageView.Image = UIImage.FromBundle ("icon_speechact_poll_teal");
				} else if(type.Equals("asks")) {
					commentImageView.Image = UIImage.FromBundle ("icon_speechact_ask_teal");
				} else {
					commentImageView.Image = UIImage.FromBundle ("icon_speechact_leak_teal");
				}
 				//commentImageView.Image = ImageLoader.DefaultRequestImage(new Uri(imageUrl), new ImageUpdateDelegate (commentImageView));
			
				cell.ContentView.AddSubview (commentImageView);
				commentImageView.Frame = new RectangleF (10, 10, 20f, 20f);
				//yCoordStart += commentImageView.Frame.Height + space;
			}

			textView.RemoveFromSuperview ();
			if(!String.IsNullOrEmpty(text))
			{
			
				textView.AttributedText = new NSAttributedString (text, UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
				textView.Editable = false;
				var newSize = textView.SizeThatFits (new SizeF (320 - baseXStart * 2, 568));
				cell.ContentView.AddSubview (textView);
				textView.Frame = new RectangleF (baseXStart, yCoordStart, 320 - baseXStart * 2, newSize.Height);
				yCoordStart += textView.Frame.Height + space;
			}
				
			upAndDownVotes.AttributedText = new NSAttributedString (
				upAndDownVotesText,
				UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), 
				UIColor.Black
			);

			SetLabelSize (upAndDownVotes,cell);


			userNameLbl.AttributedText = new NSAttributedString (userNameString, UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black);
			SetLabelSize (userNameLbl,cell);

			daysAgoLbl.AttributedText = new NSAttributedString (timeString, UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), UIColor.Black);
			SetLabelSize (daysAgoLbl,cell);

			//cell.ContentView.Frame = new RectangleF (0, 0, 320, yCoordStart + upAndDownVotes.Frame.Height + 100 + space);
		}

		private void SetLabelSize(UILabel label,UITableViewCell cell)
		{
			label.RemoveFromSuperview ();
			var newSize = label.SizeThatFits(baseSizeForFitting);

			label.Frame = new RectangleF (labelXCoordStart, yCoordStart-10,newSize.Width, newSize.Height);
			cell.ContentView.AddSubview (label);
			labelXCoordStart += newSize.Width + space;
		}

		void OnScrolling (object sender, ScrollingEventArgs e)
		{
			//uncomment to close any other cells that are open when another cell is swiped
			/*
				if (e.CellState != SWCellState.Center) {
					var paths = this.controller.TableView.IndexPathsForVisibleRows;
					foreach (var path in paths) {
						if(path.Equals(e.IndexPath))
						   continue;
						var cell = (SWTableViewCell)this.controller.TableView.CellAt (path);
						if (cell.State != SWCellState.Center) {
							cell.HideSwipedContent (true);
						}
					}
				}
				*/
		}
			
		public override int RowsInSection (UITableView tableview, int section)
		{
			if(vc.ParentViewController.isBlahs)
			{
				return vc.ParentViewController.UserBlahs.Count;
			}
			else
			{
				return vc.ParentViewController.UserComments.Count;
			}
		}
			
		public override int NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			/*var cell = tableView.DequeueReusableCell ("C") as SWTableViewCell;
			string type= vc.ParentViewController.UserBlahs [indexPath.Row].TypeName;
			if (vc.ParentViewController.isBlahs) {

				SetUp (cell,type,vc.ParentViewController.UserBlahs [indexPath.Row].T, vc.ParentViewController.UserBlahs [indexPath.Row].P.ToString () + "/" + vc.ParentViewController.UserBlahs [indexPath.Row].D.ToString (), vc.ParentViewController.UserBlahs [indexPath.Row].ChannelName, vc.ParentViewController.UserBlahs [indexPath.Row].ElapsedTimeString);

			} else {

				SetUp (cell, null, vc.ParentViewController.UserComments [indexPath.Row].T, vc.ParentViewController.UserComments [indexPath.Row].UpVoteCount.ToString ()+ "/" + vc.ParentViewController.UserComments [indexPath.Row].DownVoteCount.ToString (), vc.ParentViewController.UserComments [indexPath.Row].AuthorName, vc.ParentViewController.UserComments [indexPath.Row].ElapsedTimeString);
			}
			return cell.ContentView.Frame.Height;
*/
			/*var cell = (BGHistoryDetailCell)tableView.DequeueReusableCell ("historyDetailCell");
			if (vc.ParentViewController.isBlahs)
				cell.SetUp (vc.ParentViewController.UserBlahs [indexPath.Row]);
			else
				cell.SetUp (vc.ParentViewController.UserComments [indexPath.Row]);
			return cell.ContentView.Frame.Height;*/

			return 80f;

		}
		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{

		}

		public override float GetHeightForHeader (UITableView tableView, int section)
		{
			return 33f;
		}

		public override UIView GetViewForHeader (UITableView tableView, int section)
		{
			UIView headerView = new UIView (new RectangleF (0, 0, 320, 33));
			headerView.BackgroundColor = UIColor.Clear;
			UILabel label = new UILabel (new RectangleF (20, 7, 280, 21));
			string labelText = String.Empty;
			if(vc.ParentViewController.isBlahs)
			{
				labelText = "Posts" + "(" + vc.ParentViewController.UserBlahs.Count + ")";

			}
			else
			{
				labelText = "Comments" + "(" + vc.ParentViewController.UserComments.Count + ")";
			}
			label.AttributedText = new NSAttributedString(
				labelText,
				UIFont.FromName(BGAppearanceConstants.FontName, 17),
				UIColor.Black
			);
			headerView.AddSubview (label);
			return headerView;
		}

		public override bool CanEditRow (UITableView tableView, NSIndexPath indexPath)
		{
			if (vc.ParentViewController.isBlahs)
				return true;
			else
				return false;
		}

		public override void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
		{
			if(editingStyle == UITableViewCellEditingStyle.Delete)
			{
				if(vc.ParentViewController.isBlahs)
				{
					var blah = vc.ParentViewController.UserBlahs[indexPath.Row];
					vc.ParentViewController.UserBlahs.Remove (blah);
					tableView.DeleteRows (new NSIndexPath [] { indexPath }, UITableViewRowAnimation.Left);
					BlahguaAPIObject.Current.DeleteBlah (blah._id, BlahDeleted);
				}
			} 
			else if(editingStyle == UITableViewCellEditingStyle.None)
			{
				return;
			}

		}

		public void BlahDeleted (string status)
		{
			Console.WriteLine (status);
		}
	}
}
