// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog.Utilities;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.SlideMenu;
using SWTableViewCell;
using nint = global::System.Int32; // so that the same code can work in a unified build

namespace BlahguaMobile.IOS
{
	public partial class BGHistoryDetailViewController : UITableViewController
	{
		public string imageUrl;
		public string postTitle;
		public string upDownCount;
		public string timeAgo;

		public new BGHistoryViewController ParentViewController
		{
			get;
			set;
		}

		public BGHistoryDetailViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
            View.BackgroundColor = UIColor.FromPatternImage(UIImage.FromBundle("grayBack"));
			Title = "History";

			TableView.BackgroundColor = UIColor.White;
			//TableView.BackgroundColor = UIColor.FromPatternImage(UIImage.FromBundle("grayBack"));
			TableView.TableFooterView = new UIView ();
			TableView.AllowsSelection = false;
			TableView.TableHeaderView = new UIView ();
			TableView.SeparatorInset = new UIEdgeInsets (0, 0, 0, 0);
			TableView.ReloadData ();
			TableView.Source = new BGHistoryDetailTableSource(this);

			//TableView.Source = new Source (this);
            NavigationItem.LeftBarButtonItem = new UIBarButtonItem("Back", UIBarButtonItemStyle.Plain, (s, e)=> 
                {
                    this.NavigationController.PopViewControllerAnimated(true);
                });
            NavigationItem.LeftBarButtonItem.SetTitleTextAttributes(new UITextAttributes
                { 
                    TextColor = BGAppearanceConstants.TealGreen, 
                    TextShadowColor = UIColor.Clear, 
                    Font = UIFont.FromName("Merriweather", 16) 
                }, UIControlState.Normal);



		 }
		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier.Equals ("historyDetailToCommentDetail")) {
			}

		}
	
	}

    class CellDelegate : SWTableViewCellDelegate
    {
        private BGHistoryDetailViewController vc;

        public CellDelegate(BGHistoryDetailViewController theVC)
        {
            vc = theVC;
        }

		/*
        public override void ScrollingToState(SWTableViewCell.SWTableViewCell cell, SWCellState state)
        {
            switch (state)
            {
                case SWCellState.Center:
                    Console.WriteLine("utility buttons closed");
                    break;
                case SWCellState.Left:
                    Console.WriteLine("left utility buttons open");
                    break;
                case SWCellState.Right:
                    Console.WriteLine("right utility buttons open");
                    break;
            }
        }
        */

        public override void DidTriggerRightUtilityButton(SWTableViewCell.SWTableViewCell cell, nint index)
        {
            switch (index)
            {
                case 0:
                    UITableView tableView = (UITableView)vc.View;
                    NSIndexPath indexPath = tableView.IndexPathForCell(cell);

                    var blah = vc.ParentViewController.UserBlahs[indexPath.Row];
                    vc.ParentViewController.UserBlahs.Remove (blah);
                    BlahguaAPIObject.Current.DeleteBlah (blah._id, BlahDeleted);
                    this.vc.TableView.ReloadData ();
                    break;
            }
        }

        public void BlahDeleted (string status)
        {
            Console.WriteLine (status);
        }

        public override void DidTriggerLeftUtilityButton(SWTableViewCell.SWTableViewCell cell, nint index)
        {
            Console.WriteLine("Right button {0} was pressed.", index);

            switch (index)
            {
                case 0:
                    {
                        string blahID;
                        UITableView tableView = (UITableView)vc.View;
                        NSIndexPath indexPath = tableView.IndexPathForCell(cell);

                        if (vc.ParentViewController.isBlahs)
                        {
                            int blahIndex = indexPath.Row;

                            blahID = vc.ParentViewController.UserBlahs[blahIndex]._id;
                        }
                        else
                        {
                            int commentIndex = indexPath.Row;
                            blahID = vc.ParentViewController.UserComments[commentIndex].B;
                        }


                        BlahguaAPIObject.Current.SetCurrentBlahFromId (blahID, (blah) => 
                            {
                                InvokeOnMainThread(() => 
                                    {
                                        ((AppDelegate)UIApplication.SharedApplication.Delegate).CurrentBlah = BlahguaAPIObject.Current.CurrentBlah;

                                        var myStoryboard = ((AppDelegate)UIApplication.SharedApplication.Delegate).MainStoryboard;
                                        BGBlahViewController objBGBlahViewController = myStoryboard.InstantiateViewController("BGBlahViewController") as BGBlahViewController;
                                        BGCommentsViewController commentView = myStoryboard.InstantiateViewController("BGCommentsViewController") as BGCommentsViewController;
                                        BGStatsTableViewController statsView = myStoryboard.InstantiateViewController("BGStatsTableViewController") as BGStatsTableViewController;

                                        ((AppDelegate)UIApplication.SharedApplication.Delegate).CurrentBlah = BlahguaAPIObject.Current.CurrentBlah;
                                        SwipeViewController swipeView = new SwipeViewController(objBGBlahViewController, commentView, statsView);
                                        ((AppDelegate)UIApplication.SharedApplication.Delegate).swipeView = swipeView;
                                        ((AppDelegate)UIApplication.SharedApplication.Delegate).SlideMenu.NavigationController.PushViewController(swipeView, false);

                                    });
                            });
                    }
                    break;
            }
        }

        public override bool ShouldHideUtilityButtonsOnSwipe(SWTableViewCell.SWTableViewCell cell)
        {
            // allow just one cell's utility button to be open at once
            return true;
        }

        public override bool CanSwipeToState(SWTableViewCell.SWTableViewCell cell, SWCellState state)
        {
            switch (state)
            {
                case SWCellState.Left:
                    // set to false to disable all left utility buttons appearing
                    return true;
                case SWCellState.Right:
                    // set to false to disable all right utility buttons appearing
                    return true;
            }
            return true;
        }
    }



	public class BGHistoryDetailTableSource : UITableViewSource
	{
		private BGHistoryDetailViewController vc;

		

        private readonly CellDelegate cellDelegate;

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			SWTableViewCell.SWTableViewCell theCell = (SWTableViewCell.SWTableViewCell)tableView.CellAt (indexPath);
			if (theCell != null) {
				theCell.ShowLeftUtilityButtons (true);
			}
		}

		public BGHistoryDetailTableSource(BGHistoryDetailViewController vc) : base()
		{
			this.vc = vc;
            cellDelegate = new CellDelegate(vc);
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
            SWTableViewCell.SWTableViewCell cell;

            if (vc.ParentViewController.isBlahs)
            {
                BGBlahHistoryCell blahCell = tableView.DequeueReusableCell("B") as BGBlahHistoryCell;
                if (blahCell == null)
                {
                    NSMutableArray rightUtilityButtons = new NSMutableArray();
                    NSMutableArray leftUtilityButtons = new NSMutableArray();

                    leftUtilityButtons.AddUtilityButton(UIColor.FromRGB(36, 187, 209), "Open");
   
                    blahCell = BGBlahHistoryCell.Create();
                    rightUtilityButtons.AddUtilityButton(UIColor.FromRGB(231, 61, 80), "Delete");
                    blahCell.Delegate = cellDelegate;
                    blahCell.SetLeftUtilityButtons(NSArray.FromArray<UIButton>(leftUtilityButtons), 120f);
                    blahCell.SetRightUtilityButtons(NSArray.FromArray<UIButton>(rightUtilityButtons), 120f);

                }
                Blah userBlah = vc.ParentViewController.UserBlahs [indexPath.Row];
                blahCell.SetupBlah(userBlah);
                cell = blahCell;
            }
            else
            {
                BGCommentHistoryCell commentCell = tableView.DequeueReusableCell("C") as BGCommentHistoryCell;
                if (commentCell == null)
                {
                    NSMutableArray rightUtilityButtons = new NSMutableArray();
                    NSMutableArray leftUtilityButtons = new NSMutableArray();

                    leftUtilityButtons.AddUtilityButton(UIColor.FromRGB(36, 187, 209), "Open Post");
                    commentCell = BGCommentHistoryCell.Create();
                    commentCell.Delegate = cellDelegate;
                    commentCell.SetLeftUtilityButtons(NSArray.FromArray<UIButton>(leftUtilityButtons), 120f);
                    commentCell.SetRightUtilityButtons(NSArray.FromArray<UIButton>(rightUtilityButtons), 120f);

                }

                Comment userComment = vc.ParentViewController.UserComments[indexPath.Row];
                commentCell.SetupComment(userComment);

                cell = commentCell;
            }
			


				
			return cell;
		}


		

       
		public override int RowsInSection (UITableView tableview, int section)
		{
			if(vc.ParentViewController.isBlahs)
			{
				return vc.ParentViewController.UserBlahs.Count;
			}
			else
			{
				return vc.ParentViewController.UserComments.Count;
			}
		}
			
		public override int NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
            float height = 0f;

			if (vc.ParentViewController.isBlahs)
                height = getHeight (vc.ParentViewController.UserBlahs [indexPath.Row].T);
            else
                height = getHeight (vc.ParentViewController.UserComments [indexPath.Row].T);
				
            return height;

		}

		public float getHeight(string textViewString)
		{ 
			float height=0f;
			float xStart=30f;
			float yStart = 8f;
		
			if(!String.IsNullOrEmpty(textViewString)) {
				var obj_textView = new UITextView ();
				obj_textView.RemoveFromSuperview ();
				obj_textView.AttributedText = new NSAttributedString (textViewString, UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
				var newSize = obj_textView.SizeThatFits (new SizeF (320 - xStart * 2, 568));
				obj_textView.Frame = new RectangleF (xStart, yStart, 320 - xStart * 2, newSize.Height);
				height = obj_textView.Frame.Height + 60;
				return height;
			}
			return height;

		}


		

		public override float GetHeightForHeader (UITableView tableView, int section)
		{
			return 45f;
		}

		public override UIView GetViewForHeader (UITableView tableView, int section)
		{
			UIView headerView = new UIView (new RectangleF (0, 0, 320, 40));
			headerView.BackgroundColor = UIColor.LightGray;
			UILabel label = new UILabel (new RectangleF (20, 7, 280, 21));
			string labelText = String.Empty;
			if(vc.ParentViewController.isBlahs)
			{
				labelText = "Posts" + "(" + vc.ParentViewController.UserBlahs.Count + ")";

			} else {

				labelText = "Comments" + "(" + vc.ParentViewController.UserComments.Count + ")";
			}
			label.AttributedText = new NSAttributedString(
				labelText,
				UIFont.FromName(BGAppearanceConstants.FontName, 17),
				UIColor.Black
			);
			headerView.AddSubview (label);
            return headerView;
			
		}

		public override bool CanEditRow (UITableView tableView, NSIndexPath indexPath)
		{
			if (vc.ParentViewController.isBlahs)
				return true;
			else
				return false;
		}

		

		
	}
}