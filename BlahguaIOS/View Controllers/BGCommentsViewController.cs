// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using Comment = BlahguaMobile.BlahguaCore.Comment;

namespace BlahguaMobile.IOS
{
	public partial class BGCommentsViewController : UIViewController
	{
		#region Fields

		private ImageUpdateDelegate badgeImageUpdateDelegate;

		private float textInsetDefaultValue = 11.0f;
		private float defaultWidthOfContent = 320.0f;
		private float defaultContentViewStartYCoor = 97.0f;
		private float iphone4ContentViewHeight = 339f;
		private float iphone5ContentViewHeight = 427f;
		private SizeF toolbarViewSize = new SizeF(320f, 44f);

		private UITableView itemsTable;

		private UIButton upVoteButton;
		private UIButton downVoteButton;

		private UIButton summaryButton;
		private UIButton commentsButton;
		private UIButton statsButton;

		private Comment currentComment = null;

		public UIViewController parentViewController;

		#endregion

		#region Properties

		private Blah CurrentBlah
		{
			get
			{
				return BlahguaAPIObject.Current.CurrentBlah;
			}
		}

		public Comment CurrentComment
		{
			get
			{
				return currentComment;
			}
			set
			{
				if (currentComment != value)
					currentComment = value;
			}
		}

		#endregion

		#region Contructors


		public BGCommentsViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region View Controller

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetUpBaseLayout ();

			SetUpNavigationBar ();

			SetUpHeaderView ();

			SetUpContentView ();

			SetUpToolbar ();
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			if(segue.Identifier == "fromCommentsToStats")
			{
				((BGStatsTableViewController)segue.DestinationViewController).SetParentViewController(parentViewController);
			}
			base.PrepareForSegue (segue, sender);
		}

		#endregion

		#region Methods

		private void SetUpNavigationBar()
		{
			NavigationItem.RightBarButtonItem = new UIBarButtonItem ("Write", UIBarButtonItemStyle.Plain, (object sender, EventArgs e) => {
			});

			NavigationItem.BackBarButtonItem = new UIBarButtonItem("Blah", UIBarButtonItemStyle.Plain, (object sender, EventArgs e) => {
				if(CurrentComment != null)
				{
					CurrentComment = null;
					contentView.ReloadData();
				}
				else
				{
					NavigationController.PopToViewController(parentViewController, true);
				}
			});
		}

		private void SetUpBaseLayout()
		{
			View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromFile ("grayBack.png"));
			contentView.RemoveFromSuperview ();
			contentView.BackgroundColor = UIColor.White;
			contentView.ScrollEnabled = true;
			contentView.TranslatesAutoresizingMaskIntoConstraints = true;
			bottomToolbar.RemoveFromSuperview ();
			bottomToolbar.TranslatesAutoresizingMaskIntoConstraints = true;


			var contentViewSize = new SizeF(defaultWidthOfContent, BGAppearanceHelper.DeviceType == DeviceType.iPhone4 ? 
				iphone4ContentViewHeight : iphone5ContentViewHeight);

			contentView.Frame = new RectangleF (new PointF(0, defaultContentViewStartYCoor), contentViewSize);
			contentView.ClipsToBounds = true;
			contentView.ContentOffset = new PointF(0,0);
			contentView.BackgroundColor = UIColor.White;

			var bottomToolbarLocation = new PointF (0, contentView.Frame.Bottom);
			bottomToolbar.Frame = new RectangleF (bottomToolbarLocation, toolbarViewSize);
			bottomToolbar.BackgroundColor = UIColor.FromPatternImage (UIImage.FromFile ("greenBack.png"));
			bottomToolbar.BarTintColor = UIColor.FromPatternImage (UIImage.FromFile ("greenBack.png"));


			View.AddSubviews (new UIView [] { contentView, bottomToolbar });
		}

		private void SetUpHeaderView()
		{
			if(CurrentComment != null)
			{
				SetUpViewTitleForComment ();
			}
			else
			{
				SetUpViewTitleForBlah ();
			}
		}

		private void SetUpContentView()
		{
			contentView.ScrollEnabled = true;

			contentView.Source = new BGCommentsTableSource (CurrentComment == null ? 
				BGCommentsTableSourceType.Blah : BGCommentsTableSourceType.Comment, this);

			contentView.TableFooterView = new UIView ();

			//contentView.ContentSize = new SizeF (defaultWidthOfContent, currentYCoord);
		}

		private void SetUpToolbar()
		{
			bottomToolbar.TintColor = UIColor.Clear;
			SetUpVotesButtons ();
			SetUpModesButtons ();
		}

		private void SetUpVotesButtons()
		{
			var votesButtonRect = new RectangleF (0, 0, 11, 19);
			upVoteButton = new UIButton (UIButtonType.Custom);
			upVoteButton.Frame = votesButtonRect;
			upVoteButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentComment != null && CurrentComment.UserVote != 1)
				{
					upVoteButton.SetImage(UIImage.FromFile("arrow_up_dark.png").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetCommentVote(CurrentComment, 1, (value) => {
						Console.WriteLine(value);
					});
				}
				if(CurrentBlah.uv != 1)
				{
					upVoteButton.SetImage(UIImage.FromFile("arrow_up_dark.png").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetBlahVote(1, (value) => {
						Console.WriteLine(value);
					});
				}
			};

			downVoteButton = new UIButton (UIButtonType.Custom);
			downVoteButton.Frame = votesButtonRect;
			downVoteButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentComment != null && CurrentComment.UserVote != -1)
				{
					upVoteButton.SetImage(UIImage.FromFile("arrow_down_dark.png").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetCommentVote(CurrentComment, -1, (value) => {
						Console.WriteLine(value);
					});
				}
				if(CurrentBlah.uv != -1)
				{
					downVoteButton.SetImage(UIImage.FromFile("arrow_down_dark.png").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetBlahVote(-1, (value) => {
						Console.WriteLine(value);
					});
				}
			};

			SetVoteButtonsImages ();

			upVote.CustomView = upVoteButton;
			downVote.CustomView = downVoteButton;
		}

		private void SetVoteButtonsImages()
		{
			int uv = CurrentComment != null ? CurrentComment.UserVote : CurrentBlah.uv;
			switch(uv)
			{
			case 1:
				{
					SetVoteButtonsImages (UIImage.FromFile ("arrow_up_dark.png"), UIImage.FromFile ("arrow_down.png"));
					break;
				}
			case -1:
				{
					SetVoteButtonsImages (UIImage.FromFile ("arrow_up.png"), UIImage.FromFile ("arrow_down_dark.png"));
					break;
				}
			default:
				{
					SetVoteButtonsImages (UIImage.FromFile ("arrow_up.png"), UIImage.FromFile ("arrow_down.png"));
					break;
				}
			}
		}

		private void SetVoteButtonsImages(UIImage upVoteImage, UIImage downVoteImage)
		{
			upVoteButton.SetImage(upVoteImage
				.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
				UIControlState.Normal);
			downVoteButton.SetImage(downVoteImage
				.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
				UIControlState.Normal);
		}

		private void SetUpModesButtons ()
		{
			summaryButton = new UIButton (UIButtonType.Custom);
			summaryButton.Frame = new RectangleF (0, 0, 20, 16);
			summaryButton.SetImage (UIImage.FromFile ("summary.png"), UIControlState.Normal);
			summaryButton.TouchUpInside += (object sender, EventArgs e) => {
				SetModeButtonsImages(UIImage.FromFile ("summary_dark.png"), UIImage.FromFile ("comments.png"), UIImage.FromFile ("stats.png"));
				NavigationController.PopToViewController(parentViewController, true);
			};
			summaryView.CustomView = summaryButton;

			commentsButton = new UIButton (UIButtonType.Custom);
			commentsButton.Frame = new RectangleF (0, 0, 22, 19);
			commentsButton.SetImage (UIImage.FromFile ("comments_dark.png"), UIControlState.Normal);
			commentsButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentComment != null)
				{
					CurrentComment = null;
					contentView.ReloadData();
				}
				SetModeButtonsImages(UIImage.FromFile ("summary.png"), UIImage.FromFile ("comments_dark.png"), UIImage.FromFile ("stats.png"));
			};
			commentsView.CustomView = commentsButton;

			statsButton = new UIButton (UIButtonType.Custom);
			statsButton.Frame = new RectangleF (0, 0, 26, 17);
			statsButton.SetImage (UIImage.FromFile ("stats.png"), UIControlState.Normal);
			statsButton.TouchUpInside += (object sender, EventArgs e) => {
				SetModeButtonsImages(UIImage.FromFile ("summary.png"), UIImage.FromFile ("comments.png"), UIImage.FromFile ("stats_dark.png"));
				PerformSegue("fromCommentsToStats", this);
			};
			statsView.CustomView = statsButton;
		}

		private void SetModeButtonsImages(UIImage sumImage, UIImage commentsImage, UIImage statsImage)
		{
			commentsButton.SetImage (commentsImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
			summaryButton.SetImage (sumImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
			statsButton.SetImage (statsImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
		}

		private void SetUpViewTitleForComment()
		{
			string title = "There are " + (CurrentComment.HasComments ? CurrentComment.subComments.Count.ToString() : "no") + " comments.";
			SetUpViewTitle (title);
		}

		private void SetUpViewTitleForBlah()
		{
			string title = "There " + (CurrentBlah.Comments != null && CurrentBlah.Comments.Count > 0 ? 
				"are " + CurrentBlah.Comments.Count.ToString() : "is no") + " comments.";
			SetUpViewTitle (title);
		}

		private void SetUpViewTitle(string title)
		{
			viewTitle.AttributedText = new NSAttributedString (title, 
				UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), 
				UIColor.Black);
		}

		public void CommentsLoaded(CommentList comments)
		{
			InvokeOnMainThread(() => {
				SetUpHeaderView();
				contentView.ReloadData ();
			});
		}

		#endregion

		private enum BGCommentsTableSourceType
		{
			Blah,
			Comment
		}

		private class BGCommentsTableSource : UITableViewSource
		{
			private BGCommentsTableSourceType type;
			private BGCommentsViewController vc;

			public BGCommentsTableSource(BGCommentsTableSourceType type, BGCommentsViewController vc)
			{
				this.type = type;
				this.vc = vc;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (BGCommentTableCell)tableView.DequeueReusableCell ("commentWithImage");

				cell.SetUp (type == BGCommentsTableSourceType.Blah ? 
					vc.CurrentBlah.Comments [indexPath.Row] : 
					vc.CurrentComment.subComments [indexPath.Row]);			
				return cell;
			}

			public override int NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				if(type == BGCommentsTableSourceType.Blah)
				{
					if (vc.CurrentBlah.Comments != null)
						return vc.CurrentBlah.Comments.Count;
				}
				else
				{
					if(vc.CurrentComment.HasComments)
					{
						return vc.CurrentComment.subComments.Count;
					}
				}
				return 0;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (BGCommentTableCell)tableView.DequeueReusableCell ("commentWithImage");
				cell.SetUp (type == BGCommentsTableSourceType.Blah ? 
					vc.CurrentBlah.Comments [indexPath.Row] : 
					vc.CurrentComment.subComments [indexPath.Row]);		
				return cell.ContentView.Frame.Height;
			}

			public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
			{
				vc.CurrentComment = vc.CurrentBlah.Comments [indexPath.Row];

				tableView.ReloadData ();
			}
		}
	}
}
