// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using Comment = BlahguaMobile.BlahguaCore.Comment;

namespace BlahguaMobile.IOS
{
	public partial class BGCommentsViewController : UIViewController
	{
		#region Fields

		private UIButton upVoteButton;
		private UIButton downVoteButton;

		private UIButton summaryButton;
		private UIButton commentsButton;
		private UIButton statsButton;

		private Comment currentComment = null;

		public UIViewController parentViewController;

		private bool isWriteMode { get; set; }

		private BGNewCommentViewController newCommentViewController;

		#endregion

		#region Properties

		private Blah CurrentBlah
		{
			get
			{
				return BlahguaAPIObject.Current.CurrentBlah;
			}
		}

		public Comment CurrentComment
		{
			get
			{
				return currentComment;
			}
			set
			{
				if (currentComment != value)
					currentComment = value;
			}
		}

		#endregion

		#region Contructors


		public BGCommentsViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region View Controller

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetUpBaseLayout ();

			SetUpNavigationBar ();

			SetUpHeaderView ();

			SetUpContentView ();

			SetUpToolbar ();


		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			if(segue.Identifier == "fromCommentsToStats")
			{
				((BGStatsTableViewController)segue.DestinationViewController).SetParentViewController(parentViewController);
			}
			base.PrepareForSegue (segue, sender);
		}

		#endregion

		#region Methods

		private void SetUpNavigationBar()
		{
			if(BlahguaAPIObject.Current.CurrentUser != null)
				NavigationItem.RightBarButtonItem = new UIBarButtonItem ("Write", UIBarButtonItemStyle.Plain, WriteCommentAction);
            //Synsoft on 9 July 2014 to add back button
            NavigationItem.LeftBarButtonItem = new UIBarButtonItem("Back", UIBarButtonItemStyle.Plain, BackHandler);
          
            //Commented by Synsoft 9 July 2014
            //NavigationItem.BackBarButtonItem = new UIBarButtonItem("Blah", UIBarButtonItemStyle.Plain, (object sender, EventArgs e) => {
            //    //Synsoft on 9 July 2014 for active color  #1FBBD1
            //    NavigationItem.BackBarButtonItem.TintColor = UIColor.FromRGB(31, 187, 209);
            //    if(CurrentComment != null)
            //    {
            //        CurrentComment = null;
            //        contentView.ReloadData();
            //    }
            //    else
            //    {
            //        NavigationController.PopToViewController(parentViewController, true);
            //    }
            //});
		}

        //Synsoft on 9 July 2014 for back handler
        private void BackHandler(object sender, EventArgs args)
        {
            //Synsoft on 9 July 2014 for active color  #1FBBD1
            NavigationItem.LeftBarButtonItem.TintColor = UIColor.FromRGB(31, 187, 209);
            if (CurrentComment != null)
            {
                CurrentComment = null;
                contentView.ReloadData();
            }
            else
            {
                DismissViewController(true, null);
            }
            
           
        }

		private void SetUpBaseLayout()
		{
            View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromBundle ("grayBack"));
			contentView.BackgroundColor = UIColor.White;
			contentView.ScrollEnabled = true;

			contentView.ClipsToBounds = true;
			contentView.ContentOffset = new PointF(0,0);
			contentView.BackgroundColor = UIColor.White;

            bottomToolbar.BackgroundColor = UIColor.FromPatternImage (UIImage.FromBundle ("greenBack"));
            bottomToolbar.BarTintColor = UIColor.FromPatternImage (UIImage.FromBundle ("greenBack"));

		}

		private void SetUpHeaderView()
		{
			if(CurrentComment != null)
			{
				SetUpViewTitleForComment ();
			}
			else
			{
				SetUpViewTitleForBlah ();
			}
		}

		private void SetUpContentView()
		{
			contentView.ScrollEnabled = true;

			contentView.Source = new BGCommentsTableSource (CurrentComment == null ? 
				BGCommentsTableSourceType.Blah : BGCommentsTableSourceType.Comment, this);

			contentView.TableFooterView = new UIView ();

			//contentView.ContentSize = new SizeF (defaultWidthOfContent, currentYCoord);
		}

		private void SetUpToolbar()
		{
			bottomToolbar.TintColor = UIColor.Clear;
			SetUpVotesButtons ();
			SetUpModesButtons ();
		}

		private void SetUpVotesButtons()
		{
			var votesButtonRect = new RectangleF (0, 0, 11, 19);
			upVoteButton = new UIButton (UIButtonType.Custom);
			upVoteButton.Frame = votesButtonRect;
			upVoteButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentComment != null && CurrentComment.UserVote != 1)
				{
                    upVoteButton.SetImage(UIImage.FromBundle("arrow_up_dark").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetCommentVote(CurrentComment, 1, (value) => {
						Console.WriteLine(value);
					});
				}
				if(CurrentBlah.uv != 1)
				{
                    upVoteButton.SetImage(UIImage.FromBundle("arrow_up_dark").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetBlahVote(1, (value) => {
						Console.WriteLine(value);
					});
				}
			};

			downVoteButton = new UIButton (UIButtonType.Custom);
			downVoteButton.Frame = votesButtonRect;
			downVoteButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentComment != null && CurrentComment.UserVote != -1)
				{
                    upVoteButton.SetImage(UIImage.FromBundle("arrow_down_dark").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetCommentVote(CurrentComment, -1, (value) => {
						Console.WriteLine(value);
					});
				}
				if(CurrentBlah.uv != -1)
				{
                    downVoteButton.SetImage(UIImage.FromBundle("arrow_down_dark").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
						UIControlState.Normal);
					BlahguaAPIObject.Current.SetBlahVote(-1, (value) => {
						Console.WriteLine(value);
					});
				}
			};

			SetVoteButtonsImages ();

			upVote.CustomView = upVoteButton;
			downVote.CustomView = downVoteButton;
		}

		private void SetVoteButtonsImages()
		{
			int uv = CurrentComment != null ? CurrentComment.UserVote : CurrentBlah.uv;
			switch(uv)
			{
			case 1:
				{
                        SetVoteButtonsImages (UIImage.FromBundle ("arrow_up_dark"), UIImage.FromBundle ("arrow_down"));
					break;
				}
			case -1:
				{
                        SetVoteButtonsImages (UIImage.FromBundle ("arrow_up"), UIImage.FromBundle ("arrow_down_dark"));
					break;
				}
			default:
				{
                        SetVoteButtonsImages (UIImage.FromBundle ("arrow_up"), UIImage.FromBundle ("arrow_down"));
					break;
				}
			}
		}

		private void SetVoteButtonsImages(UIImage upVoteImage, UIImage downVoteImage)
		{
			upVoteButton.SetImage(upVoteImage
				.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
				UIControlState.Normal);
			downVoteButton.SetImage(downVoteImage
				.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
				UIControlState.Normal);
		}

		private void SetUpModesButtons ()
		{
			summaryButton = new UIButton (UIButtonType.Custom);
			summaryButton.Frame = new RectangleF (0, 0, 20, 16);
            summaryButton.SetImage (UIImage.FromBundle ("summary"), UIControlState.Normal);
			summaryButton.TouchUpInside += (object sender, EventArgs e) => {
                SetModeButtonsImages(UIImage.FromBundle ("summary_dark"), UIImage.FromBundle ("comments"), UIImage.FromBundle ("stats"));
				NavigationController.PopToViewController(parentViewController, true);
			};
			summaryView.CustomView = summaryButton;

			commentsButton = new UIButton (UIButtonType.Custom);
			commentsButton.Frame = new RectangleF (0, 0, 22, 19);
            commentsButton.SetImage (UIImage.FromBundle ("comments_dark"), UIControlState.Normal);
			commentsButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentComment != null)
				{
					CurrentComment = null;
					contentView.ReloadData();
				}
                SetModeButtonsImages(UIImage.FromBundle ("summary"), UIImage.FromBundle ("comments_dark"), UIImage.FromBundle ("stats"));
			};
			commentsView.CustomView = commentsButton;

			statsButton = new UIButton (UIButtonType.Custom);
			statsButton.Frame = new RectangleF (0, 0, 26, 17);
            statsButton.SetImage (UIImage.FromBundle ("stats"), UIControlState.Normal);
			statsButton.TouchUpInside += (object sender, EventArgs e) => {
                SetModeButtonsImages(UIImage.FromBundle ("summary"), UIImage.FromBundle ("comments"), UIImage.FromBundle ("stats_dark"));
                //Commented by Synsoft on 9 July 2014
               // PerformSegue("fromCommentsToStats", this);
               
                //Synsoft on 9 July 2014 to add popup animation

                AppDelegate objAppDelegate = new AppDelegate();
                var myStoryboard = objAppDelegate.MainStoryboard;
                BGStatsTableViewController objBGStatsTableViewController = myStoryboard.InstantiateViewController("BGStatsTableViewController") as BGStatsTableViewController;

                UINavigationController objUINavigationController = new UINavigationController(objBGStatsTableViewController);
                objUINavigationController.ModalTransitionStyle = UIModalTransitionStyle.CoverVertical;

                this.PresentViewController(objUINavigationController, true, null);
			};
			statsView.CustomView = statsButton;
		}

		private void SetModeButtonsImages(UIImage sumImage, UIImage commentsImage, UIImage statsImage)
		{
			commentsButton.SetImage (commentsImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
			summaryButton.SetImage (sumImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
			statsButton.SetImage (statsImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
		}

		private void SetUpViewTitleForComment()
		{
			string title = "There are " + (CurrentComment.HasComments ? CurrentComment.subComments.Count.ToString() : "no") + " comments.";
			SetUpViewTitle (title);
		}

		private void SetUpViewTitleForBlah()
		{
			string title = "There " + (CurrentBlah.Comments != null && CurrentBlah.Comments.Count > 0 ? 
				"are " + CurrentBlah.Comments.Count.ToString() : "is no") + " comments.";
			SetUpViewTitle (title);
		}

		private void SetUpViewTitle(string title)
		{
			viewTitle.AttributedText = new NSAttributedString (title, 
				UIFont.FromName (BGAppearanceConstants.BoldFontName, 14), 
				UIColor.Black);
		}

		public void CommentsLoaded(CommentList comments)
		{
			InvokeOnMainThread(() => {
				CurrentBlah.Comments.CollectionChanged += (sender, e) => contentView.ReloadData();
				SetUpHeaderView();
				contentView.ReloadData ();
			});
		}

		private void WriteCommentAction(object sender, EventArgs e)
		{
			UIView.BeginAnimations (null);
			UIView.SetAnimationDuration (0.5f);
			float newYCoordDiff = 0f;
			if(isWriteMode)
			{
				if(newCommentViewController != null)
				{
					newCommentViewController.View.RemoveFromSuperview ();
					newYCoordDiff = -246f;
					isWriteMode = false;
				}
				NavigationItem.RightBarButtonItem = new UIBarButtonItem ("Write", UIBarButtonItemStyle.Plain, WriteCommentAction);
                NavigationItem.RightBarButtonItem.TintColor = UIColor.FromRGB(31, 187, 209);

			}
			else
			{
				if(newCommentViewController == null)
				{
					newCommentViewController = (BGNewCommentViewController)((AppDelegate)UIApplication.SharedApplication.Delegate).MainStoryboard
						.InstantiateViewController ("BGNewCommentViewController");
					newCommentViewController.ParentViewController = this;
					AddChildViewController (newCommentViewController);
				}
				newCommentViewController.View.Frame = new RectangleF(new PointF (0, 44), newCommentViewController.View.Frame.Size);
				NavigationItem.RightBarButtonItem = new UIBarButtonItem ("Close", UIBarButtonItemStyle.Plain, WriteCommentAction);
                //Synsoft on 9 July 2014 for active color  #1FBBD1
                NavigationItem.RightBarButtonItem.TintColor = UIColor.FromRGB(31, 187, 209);
				View.AddSubview (newCommentViewController.View);
				newYCoordDiff += 246f;
				isWriteMode = true;
			}
			foreach(var subView in View.Subviews)
			{
				if(subView != newCommentViewController.View)
					subView.Frame = new RectangleF (new PointF (subView.Frame.X, subView.Frame.Y + newYCoordDiff), subView.Frame.Size);
			}
			UIView.CommitAnimations ();
		}

		public void SwitchNewCommentMode()
		{
			WriteCommentAction (null, null);
		}

		#endregion

		private enum BGCommentsTableSourceType
		{
			Blah,
			Comment
		}

		private class BGCommentsTableSource : UITableViewSource
		{
			private BGCommentsTableSourceType type;
			private BGCommentsViewController vc;

			public BGCommentsTableSource(BGCommentsTableSourceType type, BGCommentsViewController vc)
			{
				this.type = type;
				this.vc = vc;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (BGCommentTableCell)tableView.DequeueReusableCell ("commentWithImage");

				cell.SetUp (type == BGCommentsTableSourceType.Blah ? 
					vc.CurrentBlah.Comments [indexPath.Row] : 
					vc.CurrentComment.subComments [indexPath.Row]);			
				return cell;
			}

			public override int NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				if(type == BGCommentsTableSourceType.Blah)
				{
					if (vc.CurrentBlah.Comments != null)
						return vc.CurrentBlah.Comments.Count;
				}
				else
				{
					if(vc.CurrentComment.HasComments)
					{
						return vc.CurrentComment.subComments.Count;
					}
				}
				return 0;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (BGCommentTableCell)tableView.DequeueReusableCell ("commentWithImage");
				cell.SetUp (type == BGCommentsTableSourceType.Blah ? 
					vc.CurrentBlah.Comments [indexPath.Row] : 
					vc.CurrentComment.subComments [indexPath.Row]);	
				cell.SetNeedsUpdateConstraints();
				cell.UpdateConstraintsIfNeeded();
				cell.Bounds = RectangleF.FromLTRB (0, 0, 320, 64);
				cell.SetNeedsLayout();
				cell.LayoutIfNeeded();
				return cell.ContentView.SystemLayoutSizeFittingSize(UIView.UILayoutFittingCompressedSize).Height + 1;
			}

			public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
			{
				vc.CurrentComment = vc.CurrentBlah.Comments [indexPath.Row];

				tableView.ReloadData ();
			}
		}
	}
}
