// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Drawing;
using System.Collections;
using System.Collections.Generic;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog.Utilities;

namespace BlahguaMobile.IOS
{
	public partial class BGBlahViewController : UIViewController
	{
		#region Fields

		private ImageUpdateDelegate badgeImageUpdateDelegate;

		private float textInsetDefaultValue = 11.0f;
		private float defaultWidthOfContent = 320.0f;
		private float defaultContentViewStartYCoor = 97.0f;
		private float iphone4ContentViewHeight = 339f;
		private float iphone5ContentViewHeight = 427f;
		private SizeF toolbarViewSize = new SizeF(320f, 44f);

		private bool badgesShown = false;

		private UITableView tableView;

		private UITableView itemsTable;

		private UIButton upVoteButton;
		private UIButton downVoteButton;

		private UIButton summaryButton;
		private UIButton commentsButton;
		private UIButton statsButton;

		#endregion

		#region Properties

		private Blah CurrentBlah
		{
			get
			{
				return BlahguaAPIObject.Current.CurrentBlah;
			}
		}

		public bool ShouldMoveToStats { get; set; }

		#endregion

		#region Contructors

		public BGBlahViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region View Controller

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SetUpBaseLayout ();

			SetUpHeaderView ();

			SetUpContentView ();

			SetUpToolbar ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			SetModeButtonsImages(UIImage.FromFile ("summary_dark.png"), UIImage.FromFile ("comments.png"), UIImage.FromFile ("stats.png"));
			if(ShouldMoveToStats)
			{
				ShouldMoveToStats = false;
				PerformSegue ("fromBlahViewToStats", this);
			}
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			if(segue.Identifier == "fromBlahViewToComments")
			{
				var vc = (BGCommentsViewController)segue.DestinationViewController;
				BlahguaAPIObject.Current.LoadBlahComments (vc.CommentsLoaded);
				vc.parentViewController = this;
			} 


			base.PrepareForSegue (segue, sender);
		}

		#endregion

		#region Methods

		private void SetUpBaseLayout()
		{
			View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromFile ("grayBack.png"));
			contentView.BackgroundColor = UIColor.White;
			contentView.ScrollEnabled = true;
			bottomToolbar.TranslatesAutoresizingMaskIntoConstraints = true;


			contentView.ClipsToBounds = true;
			contentView.ContentOffset = new PointF(0,0);
			contentView.BackgroundColor = UIColor.White;

			var bottomToolbarLocation = new PointF (0, contentView.Frame.Bottom);
			bottomToolbar.Frame = new RectangleF (bottomToolbarLocation, toolbarViewSize);
			bottomToolbar.BackgroundColor = UIColor.FromPatternImage (UIImage.FromFile ("greenBack.png"));
			bottomToolbar.BarTintColor = UIColor.FromPatternImage (UIImage.FromFile ("greenBack.png"));

			View.AddSubviews (new UIView [] { contentView, bottomToolbar });
		}

		private void SetUpHeaderView()
		{
			userImage.Image = ImageLoader.DefaultRequestImage (new Uri (CurrentBlah.UserImage), 
				new ImageUpdateDelegate (userImage));

			SetAuthorName ();
			SetAuthorDescription ();

			//badgeImage.Frame = new RectangleF(new PointF(author.Frame.Right + 8, badgeImage.Frame.Top), badgeImage.Frame.Size);

			badgeImage.SetImage (UIImage.FromFile ("badges.png"), UIControlState.Normal);
			badgeImage.TouchUpInside += (sender, e) => {
				AdjustBadgesTableView();
			};
			badgesTableView.Source = new BGBlahBadgesTableSource ();
			if(CurrentBlah.B != null && CurrentBlah.B.Any())
			{
				badgeImage.Hidden = false;
				badgesTableView.Hidden = true;

			}
			else
			{
				badgeImage.Hidden = true;
			}

			blahTimespan.AttributedText = new NSAttributedString (
				CurrentBlah.c ?? "", 
				UIFont.FromName (BGAppearanceConstants.MediumFontName, 15), 
				UIColor.Black
			);
		}

		private void AdjustBadgesTableView()
		{
			if(badgesShown)
			{
				badgesTableView.Hidden = true;
			}
			else
			{
				badgesTableView.Hidden = false;
			}
			badgesShown = !badgesShown;
			badgesTableView.ReloadData();
		}

		private void SetUpContentView()
		{
			float currentYCoord = 0f;
			SizeF sizeForTitle = new SizeF(defaultWidthOfContent - textInsetDefaultValue * 2, 0f);
			if(!String.IsNullOrEmpty(CurrentBlah.T))
			{
				blahTitle.Hidden = false;
				var blahTitleAttributes = new UIStringAttributes {
					Font = UIFont.FromName (BGAppearanceConstants.BoldFontName, 21), 
					ForegroundColor = UIColor.Black,

				};

				//blahTitle = new UILabel (new RectangleF(new PointF(textInsetDefaultValue, textInsetDefaultValue), sizeForTitle));
				blahTitle.LineBreakMode = UILineBreakMode.WordWrap;
				blahTitle.Lines = 0;


				blahTitle.AttributedText = new NSAttributedString (CurrentBlah.T, blahTitleAttributes);
				//contentView.AddSubview (blahTitle);

				blahTitle.PreferredMaxLayoutWidth = defaultWidthOfContent - textInsetDefaultValue * 2;
			}
			else
			{
				blahTitle.Hidden = true;
			}


			if(CurrentBlah.ImageURL != null)
			{
				blahImage.Hidden = false;
				blahImage.Image = ImageLoader.DefaultRequestImage(
					new Uri(CurrentBlah.ImageURL), 
					new ImageUpdateDelegate (blahImage)
				);
			}
			else
			{
				blahImage.Hidden = true;
			}

			if(!String.IsNullOrEmpty(CurrentBlah.F))
			{
				var blahBodyAttributes = new UIStringAttributes {
					Font = UIFont.FromName(BGAppearanceConstants.FontName, 12.0f),
					ForegroundColor = UIColor.Black,
				};

				blahBodyView.Hidden = false;
				blahBodyView.AttributedText = new NSAttributedString (CurrentBlah.F, blahBodyAttributes);
				blahBodyView.TextAlignment = UITextAlignment.Left;
				blahBodyView.ScrollEnabled = false;
				blahBodyView.Editable = false;
				blahBodyView.ContentInset = new UIEdgeInsets (textInsetDefaultValue, textInsetDefaultValue, textInsetDefaultValue, textInsetDefaultValue);

			}
			else
			{
				blahBodyView.Hidden = true;
				blahBodyView.Text = "";
			}

			if (CurrentBlah.TypeName == "polls" || CurrentBlah.TypeName == "predicts")
			{

				tableView = new UITableView ();
				tableView.ScrollEnabled = false;
				tableView.AllowsMultipleSelection = false;
				tableView.BackgroundColor = UIColor.Clear;
				if(CurrentBlah.TypeName == "polls")
				{
					tableView.Source = new BGBlahPollTableSource (BlahPollType.Poll);
					tableView.Delegate = new BGBlahPollTableDelegate (BlahPollType.Poll, this);
				}
				else
				{
					tableView.Source = new BGBlahPollTableSource (BlahPollType.Predict);
					tableView.Delegate = new BGBlahPollTableDelegate (BlahPollType.Predict, this);
				}

				tableView.ReloadData ();
				tableView.TranslatesAutoresizingMaskIntoConstraints = false;

				contentView.AddSubview (tableView);

				var positionY = NSLayoutConstraint.Create (tableView, NSLayoutAttribute.Top, NSLayoutRelation.Equal, blahBodyView, NSLayoutAttribute.Bottom, 1, 8);
				var positionXLeft = NSLayoutConstraint.Create (tableView, NSLayoutAttribute.Leading, NSLayoutRelation.Equal, contentView, NSLayoutAttribute.Leading, 1, 0);
				var positionXRight = NSLayoutConstraint.Create (tableView, NSLayoutAttribute.Trailing, NSLayoutRelation.Equal, contentView, NSLayoutAttribute.Trailing, 1, 0);

				contentView.AddConstraints (new NSLayoutConstraint[] { positionY, positionXLeft, positionXRight });

				var width = NSLayoutConstraint.Create(tableView, NSLayoutAttribute.Width, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 320);
				var height = NSLayoutConstraint.Create(
					tableView, 
					NSLayoutAttribute.Height, 
					NSLayoutRelation.Equal, 
					null, 
					NSLayoutAttribute.NoAttribute, 
					1, 
					tableView.NumberOfRowsInSection(0) * 64.0f
				);

				tableView.AddConstraints(new NSLayoutConstraint[] {width, height});
			}
		}

		private void SetUpToolbar()
		{
			bottomToolbar.TranslatesAutoresizingMaskIntoConstraints = false;
			bottomToolbar.TintColor = UIColor.Clear;
			SetUpVotesButtons ();
			SetUpModesButtons ();
		}

		private void SetUpVotesButtons()
		{
			var votesButtonRect = new RectangleF (0, 0, 11, 19);
			upVoteButton = new UIButton (UIButtonType.Custom);
			upVoteButton.Frame = votesButtonRect;
			upVoteButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentBlah.uv != 1)
				{
					upVoteButton.SetImage(UIImage.FromFile("arrow_up_dark.png").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
					BlahguaAPIObject.Current.SetBlahVote(1, (value) => {
						Console.WriteLine(value);
					});
				}
			};

			downVoteButton = new UIButton (UIButtonType.Custom);
			downVoteButton.Frame = votesButtonRect;
			downVoteButton.TouchUpInside += (object sender, EventArgs e) => {
				if(CurrentBlah.uv != -1)
				{
					downVoteButton.SetImage(UIImage.FromFile("arrow_down_dark.png").ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
					BlahguaAPIObject.Current.SetBlahVote(-1, (value) => {
						Console.WriteLine(value);
					});
				}
			};

			SetVoteButtonsImages ();

			upVote.CustomView = upVoteButton;
			downVote.CustomView = downVoteButton;
		}

		private void SetVoteButtonsImages()
		{
			switch(CurrentBlah.uv)
			{
			case 1:
				{
					SetVoteButtonsImages (UIImage.FromFile ("arrow_up_dark.png"), UIImage.FromFile ("arrow_down.png"));
					break;
				}
			case -1:
				{
					SetVoteButtonsImages (UIImage.FromFile ("arrow_up.png"), UIImage.FromFile ("arrow_down_dark.png"));
					break;
				}
			default:
				{
					SetVoteButtonsImages (UIImage.FromFile ("arrow_up.png"), UIImage.FromFile ("arrow_down.png"));
					break;
				}
			}
		}

		private void SetVoteButtonsImages(UIImage upVoteImage, UIImage downVoteImage)
		{
			upVoteButton.SetImage(upVoteImage
				.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
				UIControlState.Normal);
			downVoteButton.SetImage(downVoteImage
				.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), 
				UIControlState.Normal);
		}

		private void SetUpModesButtons ()
		{
			summaryButton = new UIButton (UIButtonType.Custom);
			summaryButton.Frame = new RectangleF (0, 0, 20, 16);
			summaryButton.SetImage (UIImage.FromFile ("summary_dark.png"), UIControlState.Normal);
			summaryButton.TouchUpInside += (object sender, EventArgs e) => {
				SetModeButtonsImages(UIImage.FromFile ("summary_dark.png"), UIImage.FromFile ("comments.png"), UIImage.FromFile ("stats.png"));
			};
			summaryView.CustomView = summaryButton;

			commentsButton = new UIButton (UIButtonType.Custom);
			commentsButton.Frame = new RectangleF (0, 0, 22, 19);
			commentsButton.SetImage (UIImage.FromFile ("comments.png"), UIControlState.Normal);
			commentsButton.TouchUpInside += (object sender, EventArgs e) => {
				SetModeButtonsImages(UIImage.FromFile ("summary.png"), UIImage.FromFile ("comments_dark.png"), UIImage.FromFile ("stats.png"));
				PerformSegue("fromBlahViewToComments", this);
			};
			commentsView.CustomView = commentsButton;

			statsButton = new UIButton (UIButtonType.Custom);
			statsButton.Frame = new RectangleF (0, 0, 26, 17);
			statsButton.SetImage (UIImage.FromFile ("stats.png"), UIControlState.Normal);
			statsButton.TouchUpInside += (object sender, EventArgs e) => {
				SetModeButtonsImages(UIImage.FromFile ("summary.png"), UIImage.FromFile ("comments.png"), UIImage.FromFile ("stats_dark.png"));
				PerformSegue("fromBlahViewToStats", this);
			};
			statsView.CustomView = statsButton;
		}

		private void SetModeButtonsImages(UIImage sumImage, UIImage commentsImage, UIImage statsImage)
		{
			commentsButton.SetImage (commentsImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
			summaryButton.SetImage (sumImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
			statsButton.SetImage (statsImage.ImageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
		}

		private void SetAuthorName()
		{
			author.AttributedText = new NSAttributedString (CurrentBlah.UserName, 
				UIFont.FromName (BGAppearanceConstants.BoldFontName, 10), 
				UIColor.Black);
		}

		private void SetAuthorDescription()
		{
			userDescription.AttributedText = new NSAttributedString (CurrentBlah.DescriptionString, UIFont.FromName (BGAppearanceConstants.BoldFontName, 10), 
				UIColor.Black);
		}

		public void PollVoted(UserPollVote item)
		{
			InvokeOnMainThread(() => tableView.ReloadData ());
		}

		public void PredictionVoted(UserPredictionVote item)
		{
			InvokeOnMainThread(() => tableView.ReloadData ());
		}

		#endregion


		private enum BlahPollType
		{
			Poll,
			Predict
		}

		private class BGBlahPollTableSource : UITableViewSource
		{
			private BlahPollType type;
			private bool isUserVoted;

			private bool IsUserVoted
			{
				get
				{
					PollItem pi;
					if(type == BlahPollType.Poll)
					{
						pi = BlahguaAPIObject.Current.CurrentBlah.I.FirstOrDefault(i => i.IsUserVote == true);
					}
					else
					{

						if(BlahguaAPIObject.Current.CurrentBlah.IsPredictionExpired)
							pi = BlahguaAPIObject.Current.CurrentBlah.ExpPredictionItems.FirstOrDefault(i => i.IsUserVote == true);
						else
							pi = BlahguaAPIObject.Current.CurrentBlah.PredictionItems.FirstOrDefault(i => i.IsUserVote == true);
					}
					return pi != null;
				}
			}

			public BGBlahPollTableSource(BlahPollType type)
			{
				this.type = type;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = BGPollTableViewCell.Create();
				cell.Frame = BGAppearanceConstants.PollCellRect;
				PollItem pollItem;
				if(type == BlahPollType.Poll)
				{
					pollItem = BlahguaAPIObject.Current.CurrentBlah.I.ElementAt (indexPath.Row);
				}
				else
				{
					if (!BlahguaAPIObject.Current.CurrentBlah.IsPredictInited)
						BlahguaAPIObject.Current.CurrentBlah.UpdateUserPredictionVote (null);
					if(BlahguaAPIObject.Current.CurrentBlah.IsPredictionExpired)
					{
						pollItem = BlahguaAPIObject.Current.CurrentBlah.ExpPredictionItems [indexPath.Row];
					}
					else
					{
						pollItem = BlahguaAPIObject.Current.CurrentBlah.PredictionItems [indexPath.Row];
					}
				}
				cell.SetUp (pollItem, IsUserVoted);
				return cell;
			}

			public override int NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				return type == BlahPollType.Poll ? BlahguaAPIObject.Current.CurrentBlah.I.Count : 3;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				return 64f;
			}
			public override float GetHeightForHeader (UITableView tableView, int section)
			{
				return type == BlahPollType.Poll ? 0 : 64f;
			}

			public override UIView GetViewForHeader (UITableView tableView, int section)
			{
				var header = type == BlahPollType.Poll ? 
					new UIView() : 
					BGPollTableHeaderView.Create((BlahguaAPIObject.Current.CurrentBlah.IsPredictionExpired ? 
						"Predection was expired at " :
						"Predection will expire at ") + BlahguaAPIObject.Current.CurrentBlah.ExpireDate.ToString());
				return header;
			}
		}

		private class BGBlahPollTableDelegate : UITableViewDelegate
		{
			private BlahPollType type;
			private BGBlahViewController vc;

			public BGBlahPollTableDelegate(BlahPollType type, BGBlahViewController vc) : base()
			{
				this.type = type;
				this.vc = vc;
			}

			public override float EstimatedHeight (UITableView tableView, NSIndexPath indexPath)
			{
				return 64f;
			}

			public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				return 64f;
			}

			public override float GetHeightForHeader (UITableView tableView, int section)
			{
				return type == BlahPollType.Poll ? 0 : 64f;
			}

			public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
			{
				if(type == BlahPollType.Poll)
				{
					var pollItem = BlahguaAPIObject.Current.CurrentBlah.I [indexPath.Row];
					BlahguaAPIObject.Current.SetPollVote (pollItem, vc.PollVoted);
					BlahguaAPIObject.Current.CurrentBlah.UpdateUserPollVote (new UserPollVote () { W = indexPath.Row });
				}
				else
				{
					PollItem pollItem;
					UserPredictionVote upv;
					if(BlahguaAPIObject.Current.CurrentBlah.IsPredictionExpired)
					{
						pollItem = BlahguaAPIObject.Current.CurrentBlah.ExpPredictionItems [indexPath.Row];
						switch(indexPath.Row)
						{
						case 0:
							{
								upv = new UserPredictionVote { Z = "y" };
								break;
							}
						case 1:
							{
								upv = new UserPredictionVote { Z = "n" };
								break;
							}
						case 3:
						default:
							{
								upv = new UserPredictionVote { Z = "u" };
								break;
							}
						}
					}
					else
					{
						pollItem = BlahguaAPIObject.Current.CurrentBlah.PredictionItems [indexPath.Row];
						switch(indexPath.Row)
						{
						case 0:
							{
								upv = new UserPredictionVote { D = "y" };
								break;
							}
						case 1:
							{
								upv = new UserPredictionVote { D = "n" };
								break;
							}
						case 3:
						default:
							{
								upv = new UserPredictionVote { D = "u" };
								break;
							}
						}
					}
					BlahguaAPIObject.Current.SetPredictionVote (pollItem, vc.PredictionVoted);
					BlahguaAPIObject.Current.CurrentBlah.UpdateUserPredictionVote (upv);
				}
			}
		}

		private class BGBlahBadgesTableSource : UITableViewSource
		{
			#region implemented abstract members of UITableViewSource

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = (BGBlahBadgeCell)tableView.DequeueReusableCell ("cell");
				cell.SetUp (
					BlahguaAPIObject.Current.CurrentBlah.Badges [indexPath.Row].BadgeName, 
					BlahguaAPIObject.Current.CurrentBlah.Badges [indexPath.Row].BadgeImage
				);
				return cell;
			}

			public override int RowsInSection (UITableView tableview, int section)
			{
				return BlahguaAPIObject.Current.CurrentBlah.B == null || !BlahguaAPIObject.Current.CurrentBlah.B.Any() ? 
					0 : BlahguaAPIObject.Current.CurrentBlah.B.Count;
			}

			public override int NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			#endregion


		}
	}

	public class ImageUpdateDelegate : IImageUpdated
	{
		private UIImageView image;

		public ImageUpdateDelegate(UIImageView image)
		{
			this.image = image;
		}

		#region IImageUpdated implementation

		public void UpdatedImage (Uri uri)
		{
			image.Image = ImageLoader.DefaultRequestImage (uri, this);
		}

		#endregion
	}
}
