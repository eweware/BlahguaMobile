// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using System.ComponentModel;
using CoreGraphics;
using System.Collections.Generic;

using BlahguaMobile.BlahguaCore;

using Foundation;
using UIKit;
using MonoTouch.SlideMenu;
using SharpMobileCode.ModalPicker;

namespace BlahguaMobile.IOS
{
	public partial class BGNewPostViewController : UIViewController
	{
		const string chooseFromText = "Choose From";
		const string cancelText = "Cancel";
		const string fromCameraText = "From Camera";
		const string fromGalleryText = "From Gallery";
		const string deleteCurrentPhotoText = "Delete Current Photo";
		const string userProfileText = "Use Profile";
		const string deleteSignatare = "Delete Signature";
		private nfloat scrollOffset = 0f;
		

		private UIActivityIndicatorView progressIndicator;
		private UIImage imageForUploading;

		private bool isProfileSignature;
        private UIButton curTypeView = null;

		private CGRect doneFrame;


		private UITextField expirationDateInput;
		private UITextField ExpirationDateInput
		{
			get
			{
				if(expirationDateInput == null)
				{
					expirationDateInput = new BGTextField (new CGRect (back.Frame.X, back.Frame.Bottom + 2, 
																			305, 40));

					expirationDateInput.AttributedPlaceholder = new NSAttributedString(
						"will happen by (mm/dd/yyyy)",
						UIFont.FromName(BGAppearanceConstants.FontName, 10),
						UIColor.Black
					);
					expirationDateInput.AttributedText = new NSAttributedString(
						String.Empty, 
						UIFont.FromName(BGAppearanceConstants.FontName, 10),
						UIColor.Black
					);

                    expirationDateInput.Background = UIImage.FromBundle ("input_back");

					expirationDateInput.ReturnKeyType = UIReturnKeyType.Default;
					expirationDateInput.ShouldBeginEditing = delegate {

						if(UIScreen.MainScreen.Bounds.Height == 480)
						{
							containerScrollView.SetContentOffset(new CGPoint(0, 100), true);
						}


                        var modalPicker = new ModalPickerViewController(ModalPickerType.Date, "Select A Date", this)
                            {
                                HeaderBackgroundColor = UIColor.Red,
                                HeaderTextColor = UIColor.White,
                                TransitioningDelegate = new ModalPickerTransitionDelegate(),
                                ModalPresentationStyle = UIModalPresentationStyle.Custom
                            };
                        modalPicker.DatePicker.Mode = UIDatePickerMode.Date;

                        modalPicker.OnModalPickerDismissed += (s, ea) => 
                            {
                                var dateFormatter = new NSDateFormatter()
                                    {
                                        DateFormat = "MM/dd/yyyy"
                                    };

                                expirationDateInput.Text = dateFormatter.ToString(modalPicker.DatePicker.Date);

                            };
                        modalPicker.DatePicker.MinimumDate = (Foundation.NSDate)DateTime.Today.AddDays (3);
                        PresentViewController(modalPicker, true, null);

						return false;
					};


					expirationDateInput.Hidden = true;
				}
				return expirationDateInput;
			}
		}

		public new SlideMenuController ParentViewController { get; set; }

		private BlahCreateRecord NewPost 
		{
			get 
			{
				if (BlahguaAPIObject.Current.CreateRecord == null)
					BlahguaAPIObject.Current.CreateRecord = new BlahCreateRecord ();
				return BlahguaAPIObject.Current.CreateRecord;
			}
		}

		public BGNewPostViewController (IntPtr handle) : base (handle)
		{
            NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
            NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
		}

        private void HideKeyboard()
        {
            var activeView = KeyboardGetActiveView();
            if (activeView != null)
                activeView.ResignFirstResponder();
        }

		public override void TouchesBegan (NSSet touches, UIEvent evt)
		{
            HideKeyboard();
            
		}

		public override void ViewDidLoad ()
		{
			pollItemsTableView.Hidden = true;

			doneFrame = done.Frame;

			var buttonsTextAttributes = new UIStringAttributes {
				Font = UIFont.FromName (BGAppearanceConstants.BoldFontName, 14),
				ForegroundColor = UIColor.Black
			};

			selectSignature.SetAttributedTitle (new NSAttributedString ("  Signature", buttonsTextAttributes), UIControlState.Normal);

			selectImageButton.SetAttributedTitle (new NSAttributedString ("  Select Image", buttonsTextAttributes), UIControlState.Normal);

			selectImageButton.TouchUpInside += ActionForImage;

			titleInput.ReturnKeyType = UIReturnKeyType.Next;
			titleInput.ShouldReturn = delegate {
				bodyInput.BecomeFirstResponder ();
				return false;
			};

            bodyInput.ReturnKeyType = UIReturnKeyType.Default;

            done.SetBackgroundImage (UIImage.FromBundle ("long_button_gray"), UIControlState.Disabled);
			done.SetAttributedTitle (new NSAttributedString (
				"Done", 
				UIFont.FromName(BGAppearanceConstants.MediumFontName, 17), 
				BGAppearanceConstants.buttonTitleInactiveColor), UIControlState.Disabled);

			done.SetAttributedTitle (new NSAttributedString (
				"Done", 
				UIFont.FromName(BGAppearanceConstants.MediumFontName, 17), 
				UIColor.White), UIControlState.Normal);

            HandleTitleChanged(null);

			done.TouchUpInside += (object sender, EventArgs e) => {
				Done();
			};



			titleInput.Placeholder = "says are general posts, no requirements.";
          
            SayBtn.TouchUpInside += (object sender, EventArgs e) =>
            {
                    SetBlahType(SayBtn, BlahguaAPIObject.Current.CurrentBlahTypes. First<BlahType>(n => n.N == "says"));
            };
            buttonTopOffset.Constant = 0f;
			SetBlahType(SayBtn, BlahguaAPIObject.Current.CurrentBlahTypes. First<BlahType>(n => n.N == "says"));

            PredictBtn.TouchUpInside += (object sender, EventArgs e) =>
                {
                    SetBlahType(PredictBtn, BlahguaAPIObject.Current.CurrentBlahTypes.First<BlahType>(n => n.N == "predicts"));

                };
            PollBtn.TouchUpInside += (object sender, EventArgs e) =>
                {
                    SetBlahType(PollBtn, BlahguaAPIObject.Current.CurrentBlahTypes.First<BlahType>(n => n.N == "polls"));

                };
            AskBtn.TouchUpInside += (object sender, EventArgs e) =>
                {
                    SetBlahType(AskBtn, BlahguaAPIObject.Current.CurrentBlahTypes.First<BlahType>(n => n.N == "asks"));

                };
            LeakBtn.TouchUpInside += (object sender, EventArgs e) =>
                {
                    SetBlahType(LeakBtn, BlahguaAPIObject.Current.CurrentBlahTypes.First<BlahType>(n => n.N == "leaks"));
                };

			pollItemsTableView.AllowsMultipleSelection = false;
			pollItemsTableView.Source = new BGNewPostPollTableSource (this);
			pollItemsTableView.BackgroundColor = UIColor.Clear;

			pollItemsTableView.TableFooterView = new UIView ();
			pollItemsTableView.ScrollEnabled = false;

			BlahguaAPIObject.Current.PropertyChanged += (object sender, PropertyChangedEventArgs e) => 
			{
				if(e.PropertyName == "CreateRecord")
				{
                        UpdateForNewBlahType();

				}
			};

			done.TranslatesAutoresizingMaskIntoConstraints = false;
			containerScrollView.TranslatesAutoresizingMaskIntoConstraints=  false;
            clearAllFields();
		}


		partial void HandleTitleChanged(UITextField sender)
        {
            UpdatePostBtn();
        }

        private void UpdatePostBtn()
        {
            if ((NewPost.M == null) || (NewPost.M.Count == 0))
            {
                // no image, require a title
                if (String.IsNullOrEmpty(titleInput.Text) || (titleInput.Text.Length < 3))
                {
                    done.Enabled = false;
                }
                else
                    done.Enabled = true;
            }
            else
                done.Enabled = true;
        }

        private void EnableTypeBtn(UIButton theType)
        {
            if (theType == SayBtn)
            {
                SayBtn.SetImage(UIImage.FromBundle("icon_speechact_say_teal"), UIControlState.Normal);
                SayBtnText.TextColor = UIColor.FromRGB(96, 191, 164);
            }
            else if (theType == PredictBtn)
            {
                PredictBtn.SetImage(UIImage.FromBundle("icon_speechact_predict_teal"), UIControlState.Normal);
                PredictBtnText.TextColor = UIColor.FromRGB(96, 191, 164);
            }
            else if (theType == PollBtn)
            {
                PollBtn.SetImage(UIImage.FromBundle("icon_speechact_poll_teal"), UIControlState.Normal);
                PollBtnText.TextColor = UIColor.FromRGB(96, 191, 164);
            }
            else if (theType == AskBtn)
            {
                AskBtn.SetImage(UIImage.FromBundle("icon_speechact_ask_teal"), UIControlState.Normal);
                AskBtnText.TextColor = UIColor.FromRGB(96, 191, 164);
            }
            else if (theType == LeakBtn)
            {
                LeakBtn.SetImage(UIImage.FromBundle("icon_speechact_leak_teal"), UIControlState.Normal);
                LeakBtnText.TextColor = UIColor.FromRGB(96, 191, 164);
            }
        }

        private void DisableTypeBtn(UIButton theType)
        {
            if (theType == SayBtn)
            {
                SayBtn.SetImage(UIImage.FromBundle("icon_speechact_say"), UIControlState.Normal);
                SayBtnText.TextColor = UIColor.FromRGB(63, 43, 47);
            }
            else if (theType == PredictBtn)
            {
                PredictBtn.SetImage(UIImage.FromBundle("icon_speechact_predict"), UIControlState.Normal);
                PredictBtnText.TextColor = UIColor.FromRGB(63, 43, 47);
            }
            else if (theType == PollBtn)
            {
                PollBtn.SetImage(UIImage.FromBundle("icon_speechact_poll"), UIControlState.Normal);
                PollBtnText.TextColor = UIColor.FromRGB(63, 43, 47);
            }
            else if (theType == AskBtn)
            {
                AskBtn.SetImage(UIImage.FromBundle("icon_speechact_ask"), UIControlState.Normal);
                AskBtnText.TextColor = UIColor.FromRGB(63, 43, 47);
            }   
        else if (theType == LeakBtn)
            {
                LeakBtn.SetImage(UIImage.FromBundle("icon_speechact_leak"), UIControlState.Normal);
                LeakBtnText.TextColor = UIColor.FromRGB(63, 43, 47);
            }
        }



        private void UpdateForNewBlahType()
        {
            var typeName = BlahguaAPIObject.Current.CreateRecord.BlahType.N;
            switch (typeName)
            {
    			case "polls":
    				InvokeOnMainThread (() => 
                        {

        					pollItemsTableView.Frame = new CGRect (pollItemsTableView.Frame.X, doneFrame.Y, pollItemsTableView.Frame.Width, pollItemsTableView.Frame.Height);
        					//containerHeight.Constant = this.View.Bounds.Bottom - doneFrame.Height - 6;

        					PreparePollMode ();
        					titleInput.Placeholder = "polls need 2 or more choices";
                            ShowHideAreas(true, false);
        				});
                    break;
				 
                case "predicts":
                    InvokeOnMainThread(() =>
                        {
                            ExpirationDateInput.AttributedText = new NSAttributedString(
                                    NewPost.E ?? String.Empty, 
                                    UIFont.FromName(BGAppearanceConstants.FontName, 14),
                                    UIColor.Black
                                );

    						CGRect oldFrame = containerScrollView.Frame;


    						containerScrollView.AddSubview (ExpirationDateInput);
    						

                            ShowHideAreas(false, true);

                           	titleInput.Placeholder = "predicts need a dated outcome.";
                        });

                    break;

			    case "says":
                    ShowHideAreas(false, false);
				    titleInput.Placeholder = "says are general posts, no requirements.";
                    break;

                case "asks":
                    ShowHideAreas(false, false);
				    titleInput.Placeholder = "asks must include a question mark.";
                    break;

                case "leaks":
                    ShowHideAreas(false, false);
                    titleInput.Placeholder = "leaks require a badge to be attached.";
                    break;

                default:
                    ShowHideAreas(false, false);
				    titleInput.Placeholder = "";
                    break;
            }
        }


        private void ShowHideAreas(bool showPoll, bool showPred)
        {
            if (showPoll || showPred)
            {
                if (showPoll)
                {
                    pollItemsTableView.Hidden = false;
                    ExpirationDateInput.Hidden = true;
                    buttonTopOffset.Constant = 12f + pollItemsTableView.Frame.Height;
                }
                else 
                {
                    pollItemsTableView.Hidden = true;
                    ExpirationDateInput.Hidden = false;
                    buttonTopOffset.Constant = 12f + ExpirationDateInput.Frame.Height;
                }


            }
            else
            {
                pollItemsTableView.Hidden = true;
                ExpirationDateInput.Hidden = true;
                buttonTopOffset.Constant = 8f;
            }

        }

        private void SetBlahType(UIButton theView, BlahType newType)
        {
            HideKeyboard();
            if (theView != curTypeView)
            {
                if (curTypeView != null)
                    DisableTypeBtn(curTypeView);
                curTypeView = theView;
                if (curTypeView != null)
                {
                    EnableTypeBtn(curTypeView);
                    NewPost.BlahType = newType;
                    UpdateForNewBlahType();
                }
            }
        }
          

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            buttonTopOffset.Constant = 8f;

        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {

                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;

                //Start an animation, using values from the keyboard
                UIView.BeginAnimations ("AnimateForKeyboard");
                UIView.SetAnimationBeginsFromCurrentState (true);
                UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));

                //Pass the notification, calculating keyboard height, etc.
                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);

                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);

                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }

                //Commit the animation
                UIView.CommitAnimations (); 
            }
        }

        protected  UIView KeyboardGetActiveView()
        {
            return FindFirstResponder(this.View);
        }

        private  UIView FindFirstResponder(UIView view)
        {
            if (view.IsFirstResponder)
            {
                return view;
            }
            foreach (UIView subView in view.Subviews)
            {
                var firstResponder = FindFirstResponder(subView);
                if (firstResponder != null)
                    return firstResponder;
            }
            return null;
        }


        protected virtual void OnKeyboardChanged (bool visible, nfloat keyboardHeight)
        {
           // TODO: this method does nothing, why is it here??
        }

        protected void CenterViewInScroll(UIView viewToCenter, UIScrollView scrollView, float keyboardHeight)
        {
            var contentInsets = new UIEdgeInsets(0.0f, 0.0f, keyboardHeight, 0.0f);
            scrollView.ContentInset = contentInsets;
            scrollView.ScrollIndicatorInsets = contentInsets;

            // Position of the active field relative isnside the scroll view
            CGRect relativeFrame = View.Superview.ConvertRectToView(View.Frame, scrollView);
            var spaceAboveKeyboard = scrollView.Frame.Height - keyboardHeight;

            Console.WriteLine("frameHeight: " + relativeFrame.Height.ToString() + ", spaceAbove:" + spaceAboveKeyboard.ToString());
            // Move the active field to the center of the available space
            if (spaceAboveKeyboard < 0)
            {
                var offset = relativeFrame.Y - (spaceAboveKeyboard - viewToCenter.Frame.Height) / 2;
                scrollView.ContentOffset = new CGPoint(0, offset);
            }
        }

        protected virtual void RestoreScrollPosition(UIScrollView scrollView)
        {
            scrollView.ContentInset = UIEdgeInsets.Zero;
            scrollView.ScrollIndicatorInsets = UIEdgeInsets.Zero;
        }



		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier == "fromNewPostToSignatures")
				((BGSignaturesTableViewController)segue.DestinationViewController).ParentViewController = this;
		}

        private string ValidateCreateRecord()
        {
			NewPost.T = titleInput.Text;
			NewPost.F = bodyInput.Text;
			bool hasImage = ((NewPost.M != null) && (NewPost.M.Count > 0));
			Console.WriteLine ("About to create new " + NewPost.BlahType.N);

            // check for title or image
			if (String.IsNullOrEmpty(NewPost.T))
			{
				if (!hasImage)
					return "Headline is too short for a post with no image (< 3 characters)";
			}
			else
			{
				if ((NewPost.T.Length < 3) && (!hasImage))
					return "Headline is too short for a post with no image (< 3 characters)";

				if (NewPost.T.Length > 64)
					return "Headline is too long (> 64 characters)";
			}

			if ((NewPost.F != null) && (NewPost.F.Length > 2000))
				return "Body text is too long (> 2000 characters)";

            switch (NewPost.BlahType.N)
            {
                case "asks":
				if (NewPost.T.IndexOf("?") == -1)
					return "Ask posts must contain a question mark.";
                    break;

                case "leaks":
                    if ((NewPost.B == null) || (NewPost.B.Count == 0))
					return "Leaks must be badged";
                    break;

                case "predicts":
                    DateTime expDate;
                    if (String.IsNullOrEmpty(NewPost.T) || (NewPost.T.Length < 3))
                        return "Predictions must have a headline of at least 3 letters";

                    if (DateTime.TryParse(expirationDateInput.Text, out expDate))
                    {
                        TimeSpan timeDif = expDate - DateTime.Now;
                        if (timeDif.TotalDays < 1.0)
						return "Predictions must be at least a day in the future";
                    }
                    else
						return "Predictions must have a valid expiration date";
	                break;

                case "polls":
				if (String.IsNullOrEmpty(NewPost.T) || (NewPost.T.Length < 3))
						return "Polls must have a headline of at least 3 letters";

					if ((NewPost.I == null) || (NewPost.I.Count < 2))
					return "Polls require at least two choices.";

					foreach (PollItem curItem in NewPost.I)
					{
                        if ((curItem.G == null) || (curItem.G.Length == 0))
						return "Each poll response requires a title.";
					}
					break;
            }

            return "";
        }

		public void Done()
		{
			done.Enabled = false;
            string errString = ValidateCreateRecord();
			Console.WriteLine (errString);

            if (String.IsNullOrEmpty(errString))
            {
                NewPost.T = titleInput.Text;
                NewPost.F = bodyInput.Text;

                switch (NewPost.BlahType.N)
                {
                    case "predicts":
                        DateTime expDate;
                        if (DateTime.TryParse(expirationDateInput.Text, out expDate))
                            NewPost.ExpirationDate = expDate;
                        break;

                    case "polls":
                        
                        break;
                }

                BlahguaAPIObject.Current.CreateBlah(PostCreated);
            }
            else
            {
                // show a message box
				SlideMenuController slide = (SlideMenuController)ParentViewController;
				BGMainNavigationController bgCont = (BGMainNavigationController)slide.ContentViewController;
				BGRollViewController roll = (BGRollViewController)bgCont.ViewControllers [0];
                roll.ShowToast(errString);  
				done.Enabled = true;
            }
			this.View.EndEditing (true);
		}

		public void clearAllFields()
		{
			titleInput.Text = "";
			bodyInput.Text = "";
			selectImageButton.SetImage (null, UIControlState.Normal);
			selectImageButton.SetTitle("Select Image", UIControlState.Normal);
			ExpirationDateInput.Text = "";

			//

			NewPost.M = null;
			NewPost.B = null;
			NewPost.UseProfile = false;
			done.Enabled = false;
			pollItemsTableView.Hidden = true;

			SetBlahType(SayBtn, BlahguaAPIObject.Current.CurrentBlahTypes. First<BlahType>(n => n.N == "says"));
		}

		private void ActionForImage(object sender, EventArgs e)
		{
			UIActionSheet sheet;
			if(NewPost.M == null || NewPost.M.Count == 0)
				sheet = new UIActionSheet (chooseFromText, null, cancelText, null, new string[] {
					fromCameraText,
					fromGalleryText
				});
			else
				sheet = new UIActionSheet(chooseFromText, null, cancelText, null, new string[] {
					fromCameraText, 
					fromGalleryText, 
					deleteCurrentPhotoText
				});
			sheet.ShowInView(View);
			sheet.Clicked += FileChooseActionSheetClicked;
		}

		private void FileChooseActionSheetClicked(object sender, UIButtonEventArgs eventArgs)
		{
			var filePicker = new BGImagePickerController();
			filePicker.FinishedPickingMedia += FileChooseFinished;
			filePicker.Canceled += (sender1, eventArguments) => {

				filePicker.DismissViewController(true, 
					() => {});
			};
			if (eventArgs.ButtonIndex == 1) 
            {
				filePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
				ParentViewController.PresentViewController(filePicker, true, null);
			} 
            else if (eventArgs.ButtonIndex == 0) 
            {
				filePicker.SourceType = UIImagePickerControllerSourceType.Camera;
				ParentViewController.PresentViewController (filePicker, true, 
					() => UIApplication.SharedApplication.SetStatusBarHidden(true, UIStatusBarAnimation.Slide));
			} 
            else if (eventArgs.ButtonIndex == 2) 
            {
				if (NewPost.M != null)
					NewPost.M.Clear();
                selectImageButton.Hidden = false;
                selectImageButton.SetImage(null, UIControlState.Normal);
                selectImageButton.SetTitle("Select Image", UIControlState.Normal);

			}
		}

		private void FileChooseFinished(object sender, UIImagePickerMediaPickedEventArgs eventArgs)
		{
            UIImage image = imageForUploading = UIImageHelper.ScaleAndRotateImage(eventArgs.OriginalImage);

            DateTime now = DateTime.Now;
            string imageName = String.Format ("{0}_{1}.jpg", now.ToLongDateString(), BlahguaAPIObject.Current.CurrentUser.UserName);
            BlahguaAPIObject.Current.UploadPhoto (image.AsJPEG ().AsStream (), imageName, ImageUploaded);
			progressIndicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.Gray);
			progressIndicator.TranslatesAutoresizingMaskIntoConstraints = false;
			var constraintWidth = NSLayoutConstraint.Create (progressIndicator, NSLayoutAttribute.Width, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 40);
			var constraintHeight = NSLayoutConstraint.Create (progressIndicator, NSLayoutAttribute.Height, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 40);
			progressIndicator.AddConstraints (new NSLayoutConstraint[] { constraintHeight, constraintWidth });
			progressIndicator.HidesWhenStopped = true;
			selectImageButton.Hidden = true;
			View.AddSubview (progressIndicator);
			View.BringSubviewToFront (progressIndicator);
			var constraintX = NSLayoutConstraint.Create (progressIndicator, NSLayoutAttribute.CenterX, NSLayoutRelation.Equal, selectImageButton, NSLayoutAttribute.CenterX, 1, 0);
			var constraintY = NSLayoutConstraint.Create (progressIndicator, NSLayoutAttribute.CenterY, NSLayoutRelation.Equal, selectImageButton, NSLayoutAttribute.CenterY, 1, 0);
			View.AddConstraints (new NSLayoutConstraint[] { constraintX, constraintY });
			progressIndicator.StartAnimating ();
			((BGImagePickerController) sender).DismissViewController(true, 
				() => {});
		}

		private void ChooseSignature (object sender, EventArgs e)
		{
			UIActionSheet sheet;

			if(isProfileSignature)
			{
				sheet = new UIActionSheet (chooseFromText, null, cancelText, null, new string[] {
					userProfileText,
					deleteSignatare
				});
			}
			else
			{
				sheet = new UIActionSheet (chooseFromText, null, cancelText, null, new string[] {
					userProfileText
				});
			}

			sheet.ShowInView(View);
			sheet.Clicked += SignatureChoosedClicked;
		}

		private void SignatureChoosedClicked(object sender, UIButtonEventArgs eventArgs)
		{
			if (eventArgs.ButtonIndex == 1) {
				isProfileSignature = true;
			} else if (eventArgs.ButtonIndex == 0) {
				isProfileSignature = false;
			}
		}

		private void PreparePollMode()
		{
			NewPost.I.Clear ();
			NewPost.I.Add (new PollItem (""));
			NewPost.I.Add (new PollItem (""));

			pollItemsTableView.ReloadData ();

			AdjustTableViewSize ();
		}

		public void AdjustTableViewSize ()
		{
			var newSize = new CGSize (pollItemsTableView.Frame.Width, pollItemsTableView.NumberOfRowsInSection (0) * pollItemsTableView.RowHeight);

			pollOptionTableHeight.Constant = newSize.Height;
			
            containerScrollView.ContentSize = new CGSize (320, done.Frame.Bottom + 8);
            if (BlahguaAPIObject.Current.CreateRecord.BlahType.N == "polls")
                buttonTopOffset.Constant = 12f + newSize.Height;
		}

		private void PostCreated(Blah NewPost)
		{
            if (NewPost != null)
            {
                AppDelegate.analytics.PostCreateBlah(NewPost.Y);
                InvokeOnMainThread(() =>
                    {
                        ParentViewController.HideNewBlahDialog();
                        ParentViewController.AddNewBlahToView(NewPost);
                    });
            }
            else
            {
                InvokeOnMainThread(() =>
                    {
                        ParentViewController.ShowToast("Unable to create the post.  Please try again.  If the problem persists, please try at a different time.");
                    });
                AppDelegate.analytics.PostFormatError("blah create failed");
            }
		}

		private void ImageUploaded(string s)
		{
            if (!String.IsNullOrEmpty(s))
            {
                AppDelegate.analytics.PostUploadBlahImage();
                InvokeOnMainThread(() =>
                    {
                        progressIndicator.StopAnimating();
                        selectImageButton.Hidden = false;
                        selectImageButton.SetImage(imageForUploading, UIControlState.Normal);
                        selectImageButton.ImageEdgeInsets = new UIEdgeInsets(0, 56, 0, 56);
                        if (NewPost.M == null || NewPost.M.Count == 0)
                        {
                            NewPost.M = new List<string>();
                        }
                        NewPost.M.Add(s);
                        UpdatePostBtn();
                    });
            }
            else
            {
                AppDelegate.analytics.PostSessionError("blahimageuploadfailed");
                InvokeOnMainThread(() =>
                    {
                        progressIndicator.StopAnimating();
                        selectImageButton.Hidden = false;
                        progressIndicator.StopAnimating();
                        selectImageButton.Hidden = false;
                        selectImageButton.SetImage(null, UIControlState.Normal);
                        selectImageButton.ImageEdgeInsets = new UIEdgeInsets(0, 0, 0, 0);
                        UpdatePostBtn();
                    });
            }
		}

		public void MoveScrollOffset(int row)
		{

			if (UIScreen.MainScreen.Bounds.Height == 480) {
				scrollOffset = containerScrollView.ContentOffset.Y;

				containerScrollView.SetContentOffset (new CGPoint (containerScrollView.Frame.X, 50 + row * pollItemsTableView.RowHeight), true);
			}
			else {
				if (row > 1) {
					scrollOffset = containerScrollView.ContentOffset.Y;
					containerScrollView.SetContentOffset (new CGPoint (containerScrollView.Frame.X, (row - 1) * pollItemsTableView.RowHeight), true);
				}
			}
		}
		public void InitScrollOffset()
		{
			containerScrollView.SetContentOffset (new CGPoint (containerScrollView.Frame.X, scrollOffset), true);
		}
	}

	public class BGNewPostPollTableSource : UITableViewSource
	{
		private const float rowHeight = 40f;

		private BGNewPostViewController vc;

		public BGNewPostPollTableSource(BGNewPostViewController vc) : base()
		{
			this.vc = vc;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = (BGNewPostPollItemCell)tableView.DequeueReusableCell ("newPostPollCell");

			string backImageName = String.Empty;
			if (indexPath.Row == 0)
			{
				backImageName = "input_field_top";
				cell.SetUpWithPollItem (BlahguaAPIObject.Current.CreateRecord.I [indexPath.Row]);
			} 
			else if(BlahguaAPIObject.Current.CreateRecord.I.Count  == indexPath.Row)
			{
				cell.SetUp();
				backImageName = "input_field_bottom";

			}
			else
			{
				backImageName = "input_field_middle";
				cell.SetUpWithPollItem (BlahguaAPIObject.Current.CreateRecord.I [indexPath.Row]);
			}

			cell.PollItemTextField.ShouldBeginEditing = delegate{
				vc.MoveScrollOffset(indexPath.Row);
				return true;
			};
			cell.PollItemTextField.ShouldEndEditing = delegate {
				vc.InitScrollOffset();
				return true;
			};

			vc.AdjustTableViewSize ();
            cell.BackgroundView = new UIImageView(UIImage.FromBundle(backImageName));

			return cell;
		}

		public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			return rowHeight;
		}

		public override nint NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override nint RowsInSection (UITableView tableview, nint section)
		{
			if (BlahguaAPIObject.Current.CreateRecord == null)
				BlahguaAPIObject.Current.CreateRecord = new BlahCreateRecord ();
			return BlahguaAPIObject.Current.CreateRecord.I.Count + 1;
		}

		public override NSIndexPath WillSelectRow (UITableView tableView, NSIndexPath indexPath)
		{
			if(indexPath.Row == BlahguaAPIObject.Current.CreateRecord.I.Count)
			{

				BlahguaAPIObject.Current.CreateRecord.I.Add (new PollItem (""));
				tableView.BeginUpdates ();
				tableView.InsertRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Left);
				tableView.EndUpdates ();
			}
			return indexPath;
		}
			
	}
}
