// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Text;
using System.Globalization;
using CoreGraphics;

using BlahguaMobile.BlahguaCore;

using Foundation;
using UIKit;

namespace BlahguaMobile.IOS
{
	public partial class BGDemographicsViewController : UITableViewController
	{
		public int index;
       

		public BGDemographicsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.NavigationController.SetNavigationBarHidden(false, true);

			TableView.BackgroundColor = UIColor.FromRGB (255, 255, 248);
			TableView.TableFooterView = new UIView ();
			TableView.Source = new BGDemographicsTableSource (this);
			TableView.ReloadData ();

            NavigationItem.LeftBarButtonItem = new UIBarButtonItem("Back", UIBarButtonItemStyle.Plain, (s, e)=> 
                {
                    this.NavigationController.PopViewController(true);
                });
            NavigationItem.LeftBarButtonItem.SetTitleTextAttributes(new UITextAttributes
                { 
                    TextColor = BGAppearanceConstants.TealGreen, 
                    TextShadowColor = UIColor.Clear, 
                    Font = UIFont.FromName("Merriweather", 16) 
                }, UIControlState.Normal);


			NavigationItem.RightBarButtonItem = new UIBarButtonItem ("Done", UIBarButtonItemStyle.Done, (s, e) => {
				BlahguaAPIObject.Current.UpdateUserProfile((result) => {
					Console.WriteLine(result);
					InvokeOnMainThread(() => NavigationController.PopViewController(true));
				});
			});
            NavigationItem.RightBarButtonItem.SetTitleTextAttributes(new UITextAttributes
                { 
                    TextColor = BGAppearanceConstants.TealGreen, 
                    TextShadowColor = UIColor.Clear, 
                    Font = UIFont.FromName("Merriweather", 16) 
                }, UIControlState.Normal);

            AppDelegate.analytics.PostPageView("/self/demographics");
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);
            this.Title = "Demographics";
            this.NavigationController.NavigationBar.TitleTextAttributes = new UIStringAttributes () {
                Font = UIFont.FromName ("Merriweather", 20),
                ForegroundColor = UIColor.FromRGB (96, 191, 164)
            };
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			if(segue.Identifier == "fromDemographicsToItemSelection")
			{
				base.PrepareForSegue(segue, sender);
				var vc = (BGItemsSelectionTableViewCotroller)segue.DestinationViewController;
				if (vc != null) {
					vc.ParentViewController = this;
					vc.index = index;

					switch (index) {
					case 0:
						{
							vc.source = BlahguaAPIObject.Current.UserProfileSchema.GenderChoices;
							break;
						}

					case 2:
						{
							vc.source = BlahguaAPIObject.Current.UserProfileSchema.RaceChoices;
							break;
						}
					case 6:
						{
							vc.source = BlahguaAPIObject.Current.UserProfileSchema.CountryChoices;
							break;
						}
					case 7:
					default:
						{
							vc.source = BlahguaAPIObject.Current.UserProfileSchema.IncomeChoices;
							break;
						}
					}
					index = 0;
				}
			}
			base.PrepareForSegue (segue, sender);
		}

		public void SetValue(int index, string value)
		{
			switch(index)
			{
			case 0:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.Gender = value;
					break;
				}
			case 1:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.DOB = DateTime.Parse (value, new DateTimeFormatInfo() { FullDateTimePattern = "mm/dd/yyyy"});
					break;
				}
			case 2:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.Race = value;
					break;
				}
			case 3:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.City = value;
					break;
				}
			case 4:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.State = value;
					break;
				}
			case 5:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.Zipcode = value;
					break;
				}
			case 6:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.Country = value;
					break;
				}
			case 7:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.Income = value;
					break;
				}
			default:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.Income = value;
					break;
				}
			}
		}

		public string GetValue(int index)
		{
			switch(index)
			{
			case 0:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.Gender;
				}
			case 1:
				{
					if(BlahguaAPIObject.Current.CurrentUser.Profile.DOB != null)
					{
						String str =  ((DateTime)BlahguaAPIObject.Current.CurrentUser.Profile.DOB).ToString ("MM/dd/yyyy");
						return str; 
					}
					else 
					{
						return String.Empty;
					}
				}
			case 2:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.Race;
				}
			case 3:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.City;
				}
			case 4:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.State;
				}
			case 5:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.Zipcode;
				}
			case 6:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.Country;
				}
			case 7:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.Income;
				}
			default:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.Income;
				}
			}
		}

		public void SetPermission(int index, bool perm)
		{
			switch(index)
			{
			case 0:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.GenderPerm = perm;
					break;
				}
			case 1:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.DOBPerm = perm;
					break;
				}
			case 2:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.RacePerm = perm;
					break;
				}
			case 3:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.CityPerm = perm;
					break;
				}
			case 4:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.StatePerm = perm;
					break;
				}
			case 5:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.ZipcodePerm = perm;
					break;
				}
			case 6:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.CountryPerm = perm;
					break;
				}
			case 7:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.IncomePerm = perm;
					break;
				}
			default:
				{
					BlahguaAPIObject.Current.CurrentUser.Profile.IncomePerm = perm;
					break;
				}
			}
		}

		public bool GetPermission(int index)
		{
			switch(index)
			{
			case 0:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.GenderPerm;
				}
			case 1:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.DOBPerm;
				}
			case 2:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.RacePerm;
				}
			case 3:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.CityPerm;
				}
			case 4:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.StatePerm;
				}
			case 5:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.ZipcodePerm;
				}
			case 6:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.CountryPerm;
				}
			case 7:
			default:
				{
					return BlahguaAPIObject.Current.CurrentUser.Profile.IncomePerm;
				}
			}
		}

		public void PushSelectingTable(int index)
		{
			this.index = index;
			PerformSegue ("fromDemographicsToItemSelection", this);
		}
	}

	public class BGDemographicsTableSource : UITableViewSource
	{
		private BGDemographicsViewController vc;

		public BGDemographicsTableSource (BGDemographicsViewController vc)
		{
			this.vc = vc;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			switch(indexPath.Section)
			{
			case 1:
			case 3:
			case 4:
			case 5:
				{
					var cell = (BGDemographicsInputCell)tableView.DequeueReusableCell ("inputCell");
					cell.viewController = vc;
					cell.SetUp (indexPath.Section);
					return cell;
				}
			case 0:
			case 6:
			case 2:
			case 7:
			default:
				{
					var cell = (BGDemographicsDropDownCell)tableView.DequeueReusableCell ("dropdownCell");
					cell.viewController = vc;
					cell.SetUp (indexPath.Section);
					return cell;
				}
			}
		}

		public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			return 52f;
		}

		public override UIView GetViewForHeader (UITableView tableView, nint section)
		{
            UIView view = new UIView (new CGRect (0, 0, tableView.Frame.Width, GetHeightForHeader (tableView, section)));
			view.BackgroundColor = UIColor.FromRGB (255, 255, 248);

			UILabel label = new UILabel (new CGRect (8, 7, 280, 21));
			string labelText = String.Empty;
			switch(section)
			{
			case 0:
				{
					labelText = "Gender";
					break;
				}
			case 1:
				{
					labelText = "Date Of Birth";
					break;
				}
			case 2:
				{
					labelText = "Ethnicity";
					break;
				}
			case 3:
				{
					labelText = "City";
					break;
				}
			case 4:
				{
					labelText = "State";
					break;
				}
			case 5:
				{
					labelText = "Post code";
					break;
				}
			case 6:
				{
					labelText = "Country";
					break;
				}
			case 7:
			default:
				{
					labelText = "Income";
					break;
				}
			}
			label.AttributedText = new NSAttributedString (labelText, UIFont.FromName (BGAppearanceConstants.MediumFontName, 17), UIColor.Black);
			view.AddSubview (label);
			return view;
		}

		public override nfloat GetHeightForHeader (UITableView tableView, nint section)
		{
			return 31f;
		}

		public override nint NumberOfSections (UITableView tableView)
		{
			return 8;
		}

		public override nint RowsInSection (UITableView tableview, nint section)
		{
			return 1;
		}
	}
}
