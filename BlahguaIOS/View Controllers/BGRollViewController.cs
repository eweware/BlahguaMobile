// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.ComponentModel;

using BlahguaMobile.BlahguaCore;

using MonoTouch.SlideMenu;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog.Utilities;
using System.Threading;

namespace BlahguaMobile.IOS
{
	public partial class BGRollViewController : UICollectionViewController, IImageUpdated
	{
		#region Fields

		private SlideMenuController leftSlidingMenu;
		private BGRollViewCellsSizeManager manager;
		private UIButton profile;
		private UIButton newBlah;

		public UIPanGestureRecognizer RightMenuPanRecognizer;
		private PointF panStartPoint;
		private float startingLayoutRight = 0;
		private NSLayoutConstraint rightViewContainerXConstraint;

		public bool NaturalScrollInProgress = false;
		public bool IsAutoScrollingEnabled = false;

		private UIView rightViewContainer;
		private UIView rightView;
		private UIImageView profileImage;
		private UILabel usernameLabel;

		private bool isOpened = false;

		private bool isNewPostMode;
		private Timer toastTimer;
		private UIAlertView toast;


		#endregion

		#region Properties

		private BGNewPostViewController newPostViewController;

		#endregion

		public BGRollViewController (IntPtr handle) : base (handle)
		{
			TimerCallback tcb = HideToastDialog;
			toastTimer = new Timer (tcb);
			toast = new UIAlertView ("Heard", "test", null, null, null);
		}

		private void StartToastTimer()
		{
			toastTimer.Change (4000, -1);
		}


		private void HideToastDialog(object stateObj)
		{
			InvokeOnMainThread(() => {
					toast.DismissWithClickedButtonIndex(0, true);
				});
		}

		#region View Controller Overriden Methods

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			Title = BlahguaAPIObject.Current.CurrentChannel.ChannelName;

			if (BGAppearanceHelper.DeviceType == DeviceType.iPhone4) {

				this.View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromBundle ("texture"));

			} else if (BGAppearanceHelper.DeviceType == DeviceType.iPhone5) {

				this.View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromBundle ("texture-568h"));
			}

			else {

				this.View.BackgroundColor = UIColor.FromPatternImage (UIImage.FromBundle ("texture"));

			}

			CollectionView.BackgroundColor = UIColor.Clear;

			leftSlidingMenu = ((AppDelegate)UIApplication.SharedApplication.Delegate).SlideMenu;
			this.NavigationController.NavigationBar .SetTitleTextAttributes  (new UITextAttributes () {
				Font = UIFont.FromName ("Merriweather", 20),
				TextColor = UIColor.FromRGB (96, 191, 164)
			});

			NavigationItem.LeftBarButtonItem = new UIBarButtonItem (UIImage.FromBundle ("hamburger_teal"), UIBarButtonItemStyle.Plain, MenuButtonClicked);
			NavigationItem.LeftBarButtonItem.SetBackgroundImage (UIImage.FromBundle ("leftMenuButton"), UIControlState.Highlighted, UIBarMetrics.Default);
			//Synsoft on 9 July 2014 for active color #1FBBD1
			NavigationItem.LeftBarButtonItem.TintColor = UIColor.FromRGB (96, 191, 164);

			BlahguaAPIObject.Current.PropertyChanged += (object sender, PropertyChangedEventArgs e) => {
				if (e.PropertyName == "CurrentChannel") {
					CollectionView.ScrollToItem (NSIndexPath.FromItemSection (0, 0), UICollectionViewScrollPosition.Top, true);
					InvokeOnMainThread (() => {
						Title = BlahguaAPIObject.Current.CurrentChannel.ChannelName;
						var dataSource = ((BGRollViewDataSource)CollectionView.DataSource);
						dataSource.DataSource.Clear ();
						CollectionView.ReloadData ();
					});
					BlahguaAPIObject.Current.GetInbox (InboxLoadingCompleted);
				}
			};

			if (BlahguaAPIObject.Current.CurrentUser != null)
				BlahguaAPIObject.Current.CurrentUser.PropertyChanged += (object sender, PropertyChangedEventArgs e) => {
					if (usernameLabel.Text != ((User)sender).UserName) {
						SetUsername (BlahguaAPIObject.Current.CurrentUser.UserName);
					}
				};
				
			manager = new BGRollViewCellsSizeManager ();
			BlahguaAPIObject.Current.GetInbox (InitialInboxLoadingCompleted);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			PrepareRightBarButton ();
			((AppDelegate)UIApplication.SharedApplication.Delegate).CurrentBlah = null;
			leftSlidingMenu.SetGesturesState (true);
			if(!IsNewPostMode)
				SetSrollingAvailability (true);

		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
			if (CollectionView.NumberOfItemsInSection (0) > 0 && !IsNewPostMode)
				NaturalScrollInProgress = false;
				//CollectionView.ScrollToItem(NSIndexPath.FromItemSection(0, 0), UICollectionViewScrollPosition.Top, true);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			SetSrollingAvailability (false);
			((AppDelegate)UIApplication.SharedApplication.Delegate).SlideMenu.SetGesturesState (false);
			base.PrepareForSegue (segue, sender);
		}

		#endregion

		#region Methods

		public void AutoScroll ()
		{
			UIView.Animate (0.05, 0, 
				UIViewAnimationOptions.CurveLinear |
				UIViewAnimationOptions.AllowUserInteraction |
				UIViewAnimationOptions.AllowAnimatedContent,
				() => { 
					if (!NaturalScrollInProgress)
						CollectionView.ContentOffset = new PointF (0, CollectionView.ContentOffset.Y + 1);
				}, AutoScroll);
		}


		public void RefreshData ()
		{
			BlahguaAPIObject.Current.GetInbox (InboxLoadingCompleted);
		}

		public void DeleteFirst200Items ()
		{
			((BGRollViewDataSource)CollectionView.DataSource).DeleteFirst350Items ();
		}

		private void SetSrollingAvailability (bool enabled)
		{
			NaturalScrollInProgress = !enabled;
		}

		private void MenuButtonClicked (object sender, EventArgs args)
		{
			if (IsNewPostMode)
				return;
			leftSlidingMenu.ToggleMenuAnimated ();
		}

		private void LoginButtonClicked (object sender, EventArgs args)
		{
			PerformSegue ("fromRollToLogin", this);
		}

		private void InitialInboxLoadingCompleted (Inbox theList)
		{
			InvokeOnMainThread (() => {
				CollectionView.DataSource = new BGRollViewDataSource (manager, this);
				CollectionView.CollectionViewLayout = new BGRollViewLayout (manager, this);
				CollectionView.Delegate = new BGRollViewLayoutDelegate (manager, this);
				InboxLoadingCompleted (theList);
			});
		}

		private void InboxLoadingCompleted (Inbox inbox)
		{
			InvokeOnMainThread (() => {
				((BGRollViewDataSource)CollectionView.DataSource).InsertItems (inbox);
			});
		}

		public void UpdateProfileImage()
		{
			if(profile != null)
				profile.SetImage (GetProfileImage (), UIControlState.Normal);
		}

		public void ClearRightBarButton()
		{
			if (BlahguaCore.BlahguaAPIObject.Current.CurrentUser == null) {

				NavigationItem.SetRightBarButtonItems (new UIBarButtonItem[]{ new UIBarButtonItem ("Log in", UIBarButtonItemStyle.Plain, LoginButtonClicked) }, true);

				NavigationItem.RightBarButtonItem.SetTitleTextAttributes  (new UITextAttributes () {
					Font = UIFont.FromName ("Merriweather", 20),
					TextColor = UIColor.FromRGB (96, 191, 164)
				}, UIControlState.Normal);
			}
		}
		private void PrepareRightBarButton ()
		{
			if (BlahguaCore.BlahguaAPIObject.Current.CurrentUser == null) {
				if (NavigationItem.RightBarButtonItems == null) {
					NavigationItem.RightBarButtonItem = new UIBarButtonItem ("Log in", UIBarButtonItemStyle.Plain, LoginButtonClicked);
					NavigationItem.RightBarButtonItem.SetTitleTextAttributes  (new UITextAttributes () {
						Font = UIFont.FromName ("Merriweather", 20),
						TextColor = UIColor.FromRGB (96, 191, 164)
					}, UIControlState.Normal);
				}
			} else {
				if (NavigationItem.RightBarButtonItems.Length < 2) {

					profile = new UIButton (new RectangleF (44, 0, 44, 44));
					profile.SetImage (GetProfileImage (), UIControlState.Normal);
					newBlah = new UIButton (new RectangleF (0, 0, 44, 44));
					//newBlah.SetBackgroundImage (UIImage.FromBundle ("new_post_tap"), UIControlState.Normal);
					newBlah.SetImage (UIImage.FromBundle ("icon_createpost"), UIControlState.Normal);
					profile.TouchUpInside += (object sender, EventArgs e) => ToggleRightMenu ();
					newBlah.TouchUpInside += NewBlah;

					var negativeSpacer = new UIBarButtonItem (UIBarButtonSystemItem.FixedSpace);
					negativeSpacer.Width = -15f;

					UIView view = new UIView (new RectangleF (0, 0, 88, 44));
					view.AddSubviews (new UIView[] { profile, newBlah });
					var rightBarButton = new UIBarButtonItem (view);

					NavigationItem.SetRightBarButtonItems (new UIBarButtonItem[] { negativeSpacer, rightBarButton }, true);
				}
			}
		}

		public bool IsNewPostMode
		{
			get
			{
				return isNewPostMode;
			}
		}

		public void HideNewBlahDialog()
		{
			UIView.BeginAnimations (null);
			UIView.SetAnimationDuration (0.5f);
			isNewPostMode = false;
			newPostViewController.View.Frame =new RectangleF (0, - View.Bounds.Height, 320, UIScreen.MainScreen.Bounds.Height);
			UIView.CommitAnimations ();
			//newPostViewController.View.RemoveFromSuperview ();
			SetSrollingAvailability (true);

			((AppDelegate)UIApplication.SharedApplication.Delegate).Menu.SwitchTableSource (BGLeftMenuType.Channels);
		}

		public void AddNewBlahToView(Blah newBlah)
		{
			// determine the last visible item
			BGRollViewDataSource dataSource = (BGRollViewDataSource)CollectionView.DataSource;
			UICollectionViewCell[]	theCells = CollectionView.VisibleCells;
			int lastBlahLoc = -1, curLoc;

			foreach (BGRollViewCell curCell in theCells) {
				curLoc = dataSource.IndexOf (curCell.Blah);
				if (curLoc > lastBlahLoc)
					lastBlahLoc = curLoc;
			}

			if (lastBlahLoc < dataSource.GetItemsCount (CollectionView, 0) - 1)
				lastBlahLoc++;
				
			// replace the next blah in the roll with the new one

			dataSource.ReplaceItem (newBlah, lastBlahLoc);

			// notify the user
			ShowToast("New Post created - now look for it in the stream!");

		}

		public void ShowToast(string toastMsg)
		{
			toast.Message = toastMsg;
			
			toast.Show ();
			StartToastTimer ();
		}

		private void NewBlah (object sender, EventArgs e)
		{
			this.View.EndEditing (true);
			if(leftSlidingMenu.IsMenuOpen() || leftSlidingMenu.IsRightMenuOpen())
			{
				return;
			}
				

			if (isNewPostMode) {
				HideNewBlahDialog ();
			}  else {
				UIView.BeginAnimations (null);
				UIView.SetAnimationDuration (0.5f);
				SetSrollingAvailability (false);
				if (newPostViewController == null) {
					newPostViewController = (BGNewPostViewController)((AppDelegate)UIApplication.SharedApplication.Delegate)
						.MainStoryboard
						.InstantiateViewController ("BGNewPostViewController");
					newPostViewController.View.BackgroundColor = new UIColor(50/255.0f, 50/255.0f, 50/255.0f, 0.7f);
					newPostViewController.ParentViewController = this;
					this.AddChildViewController (newPostViewController);
					newPostViewController.View.Frame =new RectangleF (0, - View.Bounds.Height, 320, UIScreen.MainScreen.Bounds.Height);
					View.AddSubview (newPostViewController.View);
				}
				((UIScrollView)newPostViewController.View).ContentInset = new UIEdgeInsets (0, 0, 14, 0);
				newPostViewController.View.Frame = new RectangleF (0, 0, 320, UIScreen.MainScreen.Bounds.Height);
				newPostViewController.clearAllFields ();
				isNewPostMode = true;
				((AppDelegate)UIApplication.SharedApplication.Delegate).Menu.SwitchTableSource (BGLeftMenuType.Channels );
				//CollectionView.Hidden = true;

			}
			UIView.CommitAnimations ();
		}

		private void UpdateRightMenu ()
		{
			profileImage.Image = GetProfileImage ();
			SetUsername (BlahguaAPIObject.Current.CurrentUser.UserName);
		}
			
		private void ToggleRightMenu ()
		{
			/*
			if (isOpened) {
				SetSrollingAvailability (true);
				ResetToStartPosition (true);
				isOpened = false;
			} else {
				SetSrollingAvailability (false);
				SetFinalContainerViewPosition (true);
				isOpened = true;
			}
			*/
			if(IsNewPostMode)
				return;
			leftSlidingMenu.ToggleRightMenuAnimated ();
		}

		public void PanRightView (UIPanGestureRecognizer recognizer)
		{
			switch (recognizer.State) {

			case UIGestureRecognizerState.Began:
				panStartPoint = recognizer.TranslationInView (rightViewContainer);
				break;
			case UIGestureRecognizerState.Changed:
				PointF currentPoint = recognizer.TranslationInView (rightViewContainer);
				float deltaX = currentPoint.X - panStartPoint.X;
				bool panningLeft = false; 
				if (currentPoint.X < panStartPoint.X) { 
					panningLeft = true;
				}

				if (startingLayoutRight == 0) { 
					if (!panningLeft) {
						float constant = Math.Max (-deltaX, 0);
						if (constant == 0) {
							ResetToStartPosition (true);
						} else { 
							rightViewContainerXConstraint.Constant = -constant;
						}
					} else {
						float constant = Math.Min (-deltaX, BGAppearanceConstants.RightViewFrame.Width);
						if (constant == BGAppearanceConstants.RightViewFrame.Width) {
							SetFinalContainerViewPosition (true);
						} else {
							rightViewContainerXConstraint.Constant = -constant;
						}
					}
				} else {
					float adjustment = startingLayoutRight - deltaX;
					if (!panningLeft) {
						float constant = Math.Max (adjustment, 0);
						if (constant == 0) {
							ResetToStartPosition (true);
						} else {
							rightViewContainerXConstraint.Constant = -constant;
						}
					} else {
						float constant = Math.Min (adjustment, BGAppearanceConstants.RightViewFrame.Width);
						if (constant == BGAppearanceConstants.RightViewFrame.Width) {
							SetFinalContainerViewPosition (true);
						} else {
							rightViewContainerXConstraint.Constant = -constant;
						}
					}
				}
				break;
			case UIGestureRecognizerState.Ended:
				if (startingLayoutRight == 0) {
					float position = BGAppearanceConstants.RightViewFrame.Width / 2 - 1;
					if (rightViewContainer.Frame.X < position) {
						SetFinalContainerViewPosition (true);
					} else {
						ResetToStartPosition (true);
					}
				} else {
					float position = BGAppearanceConstants.RightViewFrame.Width / 2;
					if (rightViewContainer.Frame.X < position) {
						SetFinalContainerViewPosition (true);
					} else {
						ResetToStartPosition (true);
					}
				}
				break;
			case UIGestureRecognizerState.Cancelled:
				if (startingLayoutRight == 0) {
					ResetToStartPosition (true);
				} else {
					SetFinalContainerViewPosition (true);
				}
				break;
			default:
				break;
			}
		}

		public void ResetToStartPosition (bool animated)
		{
			if (startingLayoutRight == 0 &&
			    rightViewContainer.Frame.X == 0) {
				return;
			}

			rightViewContainerXConstraint.Constant = 0;

			UpdateConstraintsIfNeeded (animated, () => {
				CollectionView.UserInteractionEnabled = true;
				leftSlidingMenu.SetGesturesState (true);
				startingLayoutRight = rightViewContainerXConstraint.Constant;
			});
		}

		public void SetFinalContainerViewPosition (bool animated)
		{
			if (startingLayoutRight == BGAppearanceConstants.RightViewFrame.Width &&
			    rightViewContainer.Frame.X == BGAppearanceConstants.RightViewFrame.Width) {
				return;
			}

			rightViewContainerXConstraint.Constant = -320;

			UpdateConstraintsIfNeeded (animated, () => {
				CollectionView.UserInteractionEnabled = false;
				View.BringSubviewToFront (rightViewContainer);
				leftSlidingMenu.SetGesturesState (false);
				startingLayoutRight = -rightViewContainerXConstraint.Constant;
			});
		}

		private void UpdateConstraintsIfNeeded (bool animated, NSAction completionHandler)
		{
			float duration = 0;
			if (animated) {
				duration = 0.3f;
			}

			UIView.Animate (duration, () => {
				View.LayoutIfNeeded ();
			}, completionHandler);
		}

		private UIImage GetProfileImage ()
		{
			return ImageLoader.DefaultRequestImage (new Uri (BlahguaCore.BlahguaAPIObject.Current.CurrentUser.UserImage), this);
		}

		private void SetUsername (string text)
		{
			usernameLabel.AttributedText = new NSAttributedString (text, 
				UIFont.FromName (BGAppearanceConstants.BoldFontName, 15), UIColor.Black);
		}

		#endregion

		#region IImageUpdated implementation

		public void UpdatedImage (Uri uri)
		{
			var image = ImageLoader.DefaultRequestImage (new Uri (BlahguaCore.BlahguaAPIObject.Current.CurrentUser.UserImage), this);
			profile.SetImage (image, UIControlState.Normal);
			profileImage.Image = image;
		}

		#endregion

	}

	public class TapGestureRecognizerDelegate : UIGestureRecognizerDelegate
	{
		public override bool ShouldRecognizeSimultaneously (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer)
		{
			return true;
		}

		public override bool ShouldReceiveTouch (UIGestureRecognizer recognizer, UITouch touch)
		{
			if (touch.View is UIButton) {
				return false;
			}
			return true;
		}
	}
}
