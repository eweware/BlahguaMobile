// This file has been autogenerated from a class added in the UI designer.

using System;

using BlahguaMobile.BlahguaCore;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace BlahguaMobile.IOS
{
	public partial class BGDemographicsInputCell : UITableViewCell
	{
		private int index;
		private bool isPublic;

		public BGDemographicsViewController viewController;

		public BGDemographicsInputCell (IntPtr handle) : base (handle)
		{
		}


		public void SetUp (int section)
		{
			this.index = section;
			ContentView.BackgroundColor = UIColor.FromRGB (248, 248, 248);

			publicLabel.AttributedText = new NSAttributedString ("", UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);

			isPublicButton.SetBackgroundImage(UIImage.FromFile("signupRadioButtonUn.png"), UIControlState.Normal);

			if(viewController.GetPermission(index))
			{
				publicLabel.AttributedText = new NSAttributedString ("Public", UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
				isPublicButton.SetImage(UIImage.FromFile("signupRadioButton.png"), UIControlState.Normal);
				isPublic = true;
			}
			else
			{
				publicLabel.AttributedText = new NSAttributedString ("Private", UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
				isPublicButton.SetImage(UIImage.FromFile("signupRadioButtonUn.png"), UIControlState.Normal);
				isPublic = false;
			}
			isPublicButton.TouchUpInside += (object sender, EventArgs e) => {
				isPublic = !isPublic;
				viewController.SetPermission(index, isPublic);
				publicLabel.AttributedText = new NSAttributedString (isPublic ? "Public" : "Private", UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
			};
			input.AttributedPlaceholder = new NSAttributedString ("Type here", UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
			input.ShouldReturn = delegate {
				return true;
			};

			input.EditingDidEndOnExit += (sender, e) => {
				viewController.SetValue(index, input.Text);
			};

			string value = String.Empty;
			switch(section)
			{
			case 1:
				{
					input.ShouldReturn = delegate {
						DateTime dt;
						if (DateTime.TryParse (input.Text, out dt)) 
						{
							return false;
						}
						return true;
					};
					input.AttributedPlaceholder = new NSAttributedString ("mm/dd/yyyy", UIFont.FromName (BGAppearanceConstants.FontName, 14), UIColor.Black);
					break;
				}
			
			case 3:
				{
			
					break;
				}
			case 4:
				{
			
					break;
				}
			default:
			case 5:
				{
			
					break;
				}
			}
		}
	}
}
