// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;

using BlahguaMobile.BlahguaCore;

using Foundation;
using UIKit;
using MonoTouch.Dialog.Utilities;
using SWTableViewCell;


namespace BlahguaMobile.IOS
{
	public partial class BGCommentTableCell : SWTableViewCell.SWTableViewCell, IImageUpdated
    {
        private UIPanGestureRecognizer panRecognizer;
		private UITapGestureRecognizer tapRecognizer;
		private UITapGestureRecognizer imageTapRecognizer;

        private CGPoint panStartPoint;
        private nfloat startingLayoutRight = 0;
        private Comment userComment;
		private UITableView parentTableView;

        public BGCommentTableCell(IntPtr handle)
            : base(handle)
        {
        }

        private class BGCommentBadgesTableSource : UITableViewSource
        {
            private Comment linkedComment;

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                var cell = (BGBlahBadgeCell)tableView.DequeueReusableCell("cell");
                cell.SetUp(linkedComment.Badges[indexPath.Row]);
                return cell;
            }

            public Comment LinkedComment
            {
                get { return linkedComment; }
                set
                {
                    linkedComment = value;
                    if (linkedComment.Badges != null)
                    {
                        foreach (BadgeReference curBadge in linkedComment.Badges)
                        {
                            curBadge.UpdateBadge();
                        }
                    }
                }
            }

            public override nint RowsInSection(UITableView tableview, nint section)
            {
                if ((linkedComment != null) && (linkedComment.BD != null))
                    return linkedComment.BD.Count;
                else
                    return 0;
            }

            public override nint NumberOfSections(UITableView tableView)
            {
                return 1;
            }


        }

		public void SetUp(Comment theComment, UITableView tableView)
        {
            string userId = "0";  // signed out user
            if (BlahguaAPIObject.Current.CurrentUser != null)
                userId = BlahguaAPIObject.Current.CurrentUser._id;
            this.userComment = theComment;
            bool isUserBlah = userId.Equals(BlahguaAPIObject.Current.CurrentBlah.A);
            bool isUserComment = userId.Equals(userComment.A);

			parentTableView = tableView;

            containerView.TranslatesAutoresizingMaskIntoConstraints = false;
            //containerView.AddGestureRecognizer(panRecognizer);

		

           
            containerView.TranslatesAutoresizingMaskIntoConstraints = false;

			Action showFullScreen = () => {
				if(commentImageView.Image != null)
				{
					var myStoryboard = ((AppDelegate)UIApplication.SharedApplication.Delegate).MainStoryboard;
					FullScreenView fs = new FullScreenView(commentImageView.Image);
					((AppDelegate)UIApplication.SharedApplication.Delegate).swipeView.NavigationController.PushViewController(fs,false);
				}

			};

			imageTapRecognizer = new UITapGestureRecognizer (showFullScreen);
			imageTapRecognizer.Delegate = new PanGestureRecognizerDelegate ();
			containerView.TranslatesAutoresizingMaskIntoConstraints = false;
			imageTapRecognizer.NumberOfTapsRequired = 1;
			commentImageView.AddGestureRecognizer (imageTapRecognizer);

            BGCommentBadgesTableSource newSource = new BGCommentBadgesTableSource();
            newSource.LinkedComment = userComment;
            badgeTable.Source = newSource;

            if ((userComment.BD != null) && (userComment.BD.Count > 0))
            {
				badgeTable.Hidden = false;
				userComment.AwaitBadgeData ((didIt) => {
					int count = userComment.Badges.Count;
					badgeTableHeight.Constant = count * 28;
					badgeTable.ReloadData();
				});
                
            }
            else
            {
				badgeTableHeight.Constant = 0;
                badgeTable.Hidden = true;
            }

            if (!String.IsNullOrEmpty(userComment.AuthorImage))
			{
                imgAvatar.Image = ImageLoader.DefaultRequestImage(new Uri(userComment.AuthorImage), new ImageUpdateDelegate(imgAvatar));
			}

            if (!String.IsNullOrEmpty(userComment.ImageURL))
            {
				try {
					commentImageView.LayoutIfNeeded ();
					commentImageView.Image = ImageLoader.DefaultRequestImage(new Uri(userComment.ImageURL), this);

					if (commentImageView.Image != null) {
						UIImage img = commentImageView.Image;
						imageViewHeight.Constant = img.Size.Height / img.Size.Width * commentImageView.Frame.Width;
					} else
						imageViewHeight.Constant = 0;
				}
				catch (Exception exp) {
					System.Console.WriteLine (exp.Message);
					imageViewHeight.Constant = 0;
				}
            }
            else
            {
                commentImageView.Image = null;
                imageViewHeight.Constant = 0;
            }

            if (!String.IsNullOrEmpty(userComment.T))
            {
                text.AttributedText = new NSAttributedString(userComment.T, UIFont.FromName(BGAppearanceConstants.FontName, 14), UIColor.Black);
                text.ScrollEnabled = false;
            }

			lblUserType.AttributedText = new NSAttributedString(
                userComment.DescriptionString,
				UIFont.FromName(BGAppearanceConstants.MediumItalicFontName, 12),
				UIColor.Black
			);

            author.AttributedText = new NSAttributedString(
                userComment.AuthorName,
                UIFont.FromName(BGAppearanceConstants.MediumFontName, 16),
				BGAppearanceConstants.TealGreen
            );

            string timeAgo= Utilities.ElapsedDateString(userComment.CreationDate);

            timespan.AttributedText = new NSAttributedString(
				timeAgo,
                UIFont.FromName(BGAppearanceConstants.MediumFontName, 12),
                UIColor.Black
            );

            upAndDownVotes.AttributedText = new NSAttributedString(
                userComment.UpVoteCount.ToString() + "/" + userComment.DownVoteCount.ToString(),
                UIFont.FromName(BGAppearanceConstants.MediumFontName, 16),
                UIColor.Black
            );

			/*
			 * // vote button
            if (isUserBlah || isUserComment)
            {
                upVoteButton.SetImage(UIImage.FromFile("arrow_up.png"), UIControlState.Normal);
                upVoteButton.Enabled = false;
            }
            else
            {
                if (userComment.uv == -1)
                {
                    upVoteButton.SetImage(UIImage.FromFile("arrow_up.png"), UIControlState.Normal);
                    upVoteButton.Enabled = false;
                }
                else if (userComment.uv == 1)
                {
                    upVoteButton.SetImage(UIImage.FromFile("arrow_up_dark.png"), UIControlState.Normal);
                    upVoteButton.Enabled = false;
                }
                else
                {
                    upVoteButton.Enabled = true;
                }
            }

            upVoteButton.TouchUpInside += (sender, e) =>
                {
                    SetCommentVote(1);
                };
			*/
        }

		public void UpdatedImage(Uri uri)
		{
			commentImageView.Image = ImageLoader.DefaultRequestImage(uri, this);
			if (commentImageView.Image != null) {
				UIImage img = commentImageView.Image;
				nfloat newHeight = img.Size.Height / img.Size.Width * commentImageView.Frame.Width;


				imageViewHeight.Constant = newHeight;
				parentTableView.ReloadData ();
			}

		}

        private void SetCommentVote(int theVote)
        {
            if((BlahguaAPIObject.Current.CurrentUser != null) && 
                (userComment.uv != -1) && 
                (userComment.uv != 1))
            {
                BlahguaAPIObject.Current.SetCommentVote(userComment, theVote, (v) =>
                    {
                        if (v != theVote)
                        {
                            // something happend
                        }
                        else if (v != userComment.uv)
                        {
                            userComment.uv = v;
                            InvokeOnMainThread( () => 
                                {
									/*
                                    if (v == 1)
                                    {
                                        upVoteButton.SetImage(UIImage.FromFile("arrow_up_dark.png"), UIControlState.Normal);
                                        userComment.UpVoteCount++;
                                    }
                                    else
                                    {
                                        upVoteButton.SetImage(UIImage.FromFile("arrow_up.png"), UIControlState.Normal);
                                        userComment.DownVoteCount++;
                                    }
                                    upVoteButton.Enabled = false;
                                   
									*/
                                    upAndDownVotes.AttributedText = new NSAttributedString(
                                        userComment.UpVoteCount.ToString() + "/" + userComment.DownVoteCount.ToString(),
                                        UIFont.FromName(BGAppearanceConstants.BoldFontName, 14),
                                        UIColor.Black);
									LeftEdgeConstraint.Constant = 0;
                                });
                        }
                    });
            }
        }


        private void UpdateConstraintsIfNeeded(bool animated, Action completionHandler)
        {
            float duration = 0;
            if (animated)
            {
                duration = 0.1f;
            }

            UIView.Animate(duration, () =>
            {
                LayoutIfNeeded();
            }, completionHandler);
        }


    }


    public class PanGestureRecognizerDelegate : UIGestureRecognizerDelegate
    {
        public override bool ShouldRecognizeSimultaneously(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer)
        {
			return false;
        }

        public override bool ShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch)
        {
            //			if(touch.View is UIButton)
            //			{
            //				return false;
            //			}
            return true;
        }
    }

}